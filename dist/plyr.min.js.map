{"version":3,"sources":["utils/is.js","utils/events.js","utils/elements.js","utils/animation.js","utils/browser.js","support.js","html5.js","utils/objects.js","utils/strings.js","i18n.js","utils/arrays.js","storage.js","utils/loadSprite.js","utils/time.js","controls.js","utils/fetch.js","utils/urls.js","captions.js","config/defaults.js","config/types.js","console.js","fullscreen.js","utils/loadImage.js","ui.js","listeners.js","../../node_modules/loadjs/dist/loadjs.umd.js","utils/loadScript.js","plugins/vimeo.js","plugins/youtube.js","media.js","plugins/ads.js","source.js","plyr.js"],"names":["getConstructor","input","constructor","instanceOf","Boolean","is","Object","Number","isNaN","String","Function","nullOrUndefined","Array","isArray","WeakMap","NodeList","Element","Text","Event","window","TextTrackCue","VTTCue","TextTrack","string","kind","test","array","nodeList","length","object","keys","supportsPassiveListeners","supported","options","defineProperty","addEventListener","removeEventListener","e","toggleListener","element","event","callback","toggle","arguments","undefined","passive","capture","empty","function","events","split","forEach","type","_this","eventListeners","push","on","call","this","off","once","onceCallback","args","_len","_key","apply","triggerEvent","bubbles","detail","CustomEvent","assign","dispatchEvent","wrap","elements","wrapper","targets","from","reverse","index","child","cloneNode","parent","parentNode","sibling","nextSibling","appendChild","insertBefore","setAttributes","attributes","entries","_ref","key","_ref2","value","setAttribute","createElement","text","document","innerText","insertElement","removeElement","removeChild","emptyElement","childNodes","lastChild","replaceElement","newChild","oldChild","replaceChild","getAttributesFromSelector","sel","existingAttributes","existing","s","selector","trim","className","replace","parts","charAt","class","id","toggleHidden","hidden","hide","boolean","hasAttribute","removeAttribute","toggleClass","force","method","classList","contains","hasClass","matches","prototype","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","querySelectorAll","includes","getElements","container","getElement","querySelector","getFocusElement","focused","activeElement","body","toggleState","target","pressed","getAttribute","state","transitionEndEvent","find","style","range","browser","documentMode","documentElement","navigator","userAgent","platform","support","provider","playsinline","api","ui","canPlayInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","matchMedia","html5","filter","source","mime","getSources","map","player","currentTime","playing","src","load","play","config","blankVideo","debug","log","extend","sources","shift","concat","format","toString","match","i","replaceAll","RegExp","toTitleCase","toUpperCase","substr","toLowerCase","toCamelCase","toPascalCase","slice","getHTML","innerHTML","i18n","reduce","obj","seekTime","title","dedupe","item","indexOf","Storage","enabled","storage","store","localStorage","getItem","json","JSON","parse","get","setItem","stringify","removeItem","loadSprite","url","hasId","exists","getElementById","update","data","insertAdjacentElement","useStorage","cached","prefix","content","then","result","catch","getHours","parseInt","getMinutes","getSeconds","formatTime","time","displayHours","inverted","number","hours","mins","secs","controls","cors","URL","iconUrl","location","host","isIE","svg4everybody","selectors","buttons","pause","restart","rewind","fastForward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","seekTooltip","classNames","tooltip","error","warn","toggleNativeControls","getIconUrl","iconPath","iconPrefix","icon","createElementNS","use","path","setAttributeNS","attr","badge","menu","buttonType","button","label","labelPressed","iconPressed","control","createIcon","createLabel","updateRangeFill","suffix","list","_ref$badge","checked","_ref$checked","radio","faux","insertAdjacentHTML","forceHours","setRange","muted","current","max","toFixed","getElementsByTagName","nodeValue","buffered","isWebkit","setProperty","tooltips","percent","clientRect","getBoundingClientRect","visible","_toggle","_this2","touch","width","pageX","left","parseFloat","updateTimeDisplay","invert","invertTime","seeking","updateProgress","hasDuration","displayDuration","paused","updateSeekTooltip","setting","tabs","panes","quality","_this3","toggleTab","checkMenu","sort","a","b","sorting","createMenuItem","getLabel","createBadge","getBadge","updateSetting","pane","currentTrack","default","tracks","getTracks","track","_this4","active","language","unshift","bind","speed","isVimeo","_this5","values","some","tab","form","show","isMenuItem","isButton","stopPropagation","open","clone","position","opacity","name","scrollWidth","height","scrollHeight","transitions","reducedMotion","size","getTabSize","propertyName","focus","createButton","createRange","createProgress","createTime","inner","home","_this6","back","setQualityMenu","getQualityOptions","setSpeedMenu","Math","floor","random","props","create","_ref3","findElements","offsetHeight","labels","join","_this7","fetch","responseType","Promise","resolve","reject","request","XMLHttpRequest","responseText","response","Error","statusText","send","parseUrl","parser","href","buildUrlParams","params","URLSearchParams","set","isYouTube","textTracks","setCaptionsMenu","hostname","protocol","blob","createObjectURL","userLanguage","setLanguage","trackEvents","_captions","meta","mode","updateCues","trackRemoved","currentTrackNode","firstMatch","getCurrentTrack","embed","enableTextTrack","toggleCaptions","has","fromLanguage","sortIsDefault","sorted","cues","activeCues","cue","getCueAsHTML","cueText","caption","defaults","providers","types","noop","Console","console","onChange","isIos","focusable","first","last","keyCode","shiftKey","preventDefault","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","x","y","overflow","fallback","Fullscreen","property","native","iosNative","webkitEnterFullscreen","requestFullscreen","webkitExitFullscreen","action","cancelFullScreen","exitFullscreen","exit","enter","fullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","pre","loadImage","minWidth","image","Image","handler","onload","onerror","naturalWidth","uiSupported","listeners","inject","setup","loop","updateVolume","timeUpdate","checkPlaying","isTouch","ready","setTitle","poster","backgroundImage","setPoster","durationUpdate","isEmbed","iframe","enable","posterEnabled","loadPromise","togglePoster","stopped","toggleControls","loading","timers","setTimeout","hideControls","hover","Listeners","lastKey","handleKey","toggleMenu","firstTouch","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","keyboard","global","tabFocus","delay","hasAudio","resetOnEnd","checkLoading","ads","initialized","managerPromise","clickToPlay","ended","disableContextMenu","_event$detail","inputEvent","proxy","defaultHandler","customHandlerKey","customHandler","returned","hasCustomHandler","showHomeTab","showTab","currentTarget","eventType","done","seekTo","toggleInvert","_player","noTransition","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","splice","executeCallbacks","depsNotFound","success","loadFile","callbackFn","numTries","isCss","doc","async","maxTries","numRetries","beforeCallbackFn","before","pathStripped","rel","onbeforeload","ev","sheet","cssText","defaultPrevented","head","loadjs","paths","arg1","arg2","fn","numWaiting","loadFiles","deps","bundleIds","r","subscribe","reset","isDefined","module","exports","loadScript","assurePlaybackState","hasPlayed","vimeo","setAspectRatio","Vimeo","urls","sdk","ratio","padding","paddingBottom","offset","transform","autoplay","$2","embedContainer","thumbnail_large","pathname","Player","autopause","disableTextTrack","stop","restorePause","setVolume","setCurrentTime","selected","setPlaybackRate","setLoop","currentSrc","getVideoUrl","all","getVideoWidth","getVideoHeight","dimensions","getRatio","w","h","getAspectRatio","setAutopause","getVideoTitle","getCurrentTime","getDuration","getTextTracks","strippedCues","_ref$cues","fragment","createDocumentFragment","firstChild","getPaused","seconds","build","mapQualityUnit","entry","youtube","YT","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","google","items","snippet","currentId","startsWith","posterSrc","format$$1","backgroundSize","message","instance","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stopVideo","getPlaybackQuality","setPlaybackQuality","getAvailablePlaybackRates","buffering","setInterval","getVideoLoadedFraction","lastBuffered","levels","getAvailableQualityLevels","level","unMute","Ads","publisherId","manager","loader","cuePoints","safetyTimer","countdownTimer","ima","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setAdWillPlayMuted","getRemainingTime","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","seekElement","cuePercentage","AdEvent","onAdEvent","ad","getAd","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","_this11","base","Date","now","attribute","cancelRequests","check","crossorigin","addStyleHook","insertElements","Plyr","failed","jQuery","plyr","original","tagName","getProviderByUrl","searchParams","truthy","promiseError","mediaPlay","err","step","webkitShowPlaybackTargetPicker","isHidden","hiding","eventName","soft","cleanCallback","unload","inputIsValid","min","end","fauxDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","prev","curr","abs","closest","change","states","webkitPresentationMode","inline","t"],"mappings":"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C,GAEI9J,KAAKe,SAASkN,cACrBsM,EAAUlY,EAAc,OAAQc,EAA0BnD,KAAKwI,OAAO+E,UAAUgN,YAC9EzQ,UAAYiC,OACfhL,SAASkN,SAAStM,YAAY4Y,KAGtBxa,KAAKC,KAAMA,KAAKsH,MAAO,wBA1B/BoB,MAAMoG,KAAK,4BAA6BvS,aANxCmM,MAAMoG,KAAK,sCCtPtB0L,aAEO,QAGF,UAGA,YAGG,aAGC,WAGD,UAGF,SACD,WAGG,sBAIO,cAGL,gBAGE,QAGP,oBAGM,gBAGC,cAGF,sBAGQ,cAGR,aACA,eACH,iDAGG,wDAIC,aAEL,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,0BAMI,mBAOE,WAEN,GACA,IACA,EACA,KACA,IACA,KACA,EACA,IACA,EACA,IACA,uBAMK,UACD,uBAKE,QACJ,qBAKE,WACE,eAGF,wBAKC,YACC,aACC,qBAKF,MACJ,kBAKL,+BAMA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAGA,WACA,UACA,uBAKS,iBACD,0BACF,aACC,oBACM,2BACP,cACE,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,iBACH,eACC,iBACC,eACH,aACC,YACF,UACA,YACE,iBACG,mBACD,wBACM,wBAEL,UACA,UACA,SACD,SACA,SACA,wBAOA,gDACG,6CACH,wDAGA,yCACA,wHAGA,uEAMH,UACA,WACC,aACE,YACD,iBACK,UACP,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,+BAIA,kBACA,mBACA,YACA,cACA,cACA,iBACA,gBACA,gCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,mCACK,kCACP,8BACI,oCACE,+BACP,4BACI,iCACC,8B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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\n\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst is = {\n    object(input) {\n        return getConstructor(input) === Object;\n    },\n    number(input) {\n        return getConstructor(input) === Number && !Number.isNaN(input);\n    },\n    string(input) {\n        return getConstructor(input) === String;\n    },\n    boolean(input) {\n        return getConstructor(input) === Boolean;\n    },\n    function(input) {\n        return getConstructor(input) === Function;\n    },\n    array(input) {\n        return !is.nullOrUndefined(input) && Array.isArray(input);\n    },\n    weakMap(input) {\n        return instanceOf(input, WeakMap);\n    },\n    nodeList(input) {\n        return instanceOf(input, NodeList);\n    },\n    element(input) {\n        return instanceOf(input, Element);\n    },\n    textNode(input) {\n        return getConstructor(input) === Text;\n    },\n    event(input) {\n        return instanceOf(input, Event);\n    },\n    cue(input) {\n        return instanceOf(input, window.TextTrackCue) || instanceOf(input, window.VTTCue);\n    },\n    track(input) {\n        return instanceOf(input, TextTrack) || (!is.nullOrUndefined(input) && is.string(input.kind));\n    },\n    url(input) {\n        return !is.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n    },\n    nullOrUndefined(input) {\n        return input === null || typeof input === 'undefined';\n    },\n    empty(input) {\n        return (\n            is.nullOrUndefined(input) ||\n            ((is.string(input) || is.array(input) || is.nodeList(input)) && !input.length) ||\n            (is.object(input) && !Object.keys(input).length)\n        );\n    },\n};\n\nexport default is;\n","// ==========================================================================\n// Event utils\n// ==========================================================================\n\nimport is from './is';\n\n// Check for passive event listener support\n// https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n// https://www.youtube.com/watch?v=NPM6172J22g\nconst supportsPassiveListeners = (() => {\n    // Test via a getter in the options object to see if the passive property is accessed\n    let supported = false;\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get() {\n                supported = true;\n                return null;\n            },\n        });\n        window.addEventListener('test', null, options);\n        window.removeEventListener('test', null, options);\n    } catch (e) {\n        // Do nothing\n    }\n\n    return supported;\n})();\n\n// Toggle event listener\nexport function toggleListener(element, event, callback, toggle = false, passive = true, capture = false) {\n    // Bail if no element, event, or callback\n    if (!element || !('addEventListener' in element) || is.empty(event) || !is.function(callback)) {\n        return;\n    }\n\n    // Allow multiple events\n    const events = event.split(' ');\n\n    // Build options\n    // Default to just the capture boolean for browsers with no passive listener support\n    let options = capture;\n\n    // If passive events listeners are supported\n    if (supportsPassiveListeners) {\n        options = {\n            // Whether the listener can be passive (i.e. default never prevented)\n            passive,\n            // Whether the listener is a capturing listener or not\n            capture,\n        };\n    }\n\n    // If a single node is passed, bind the event listener\n    events.forEach(type => {\n        if (this && this.eventListeners && toggle) {\n            // Cache event listener\n            this.eventListeners.push({ element, type, callback, options });\n        }\n\n        element[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n    });\n}\n\n// Bind event handler\nexport function on(element, events = '', callback, passive = true, capture = false) {\n    toggleListener.call(this, element, events, callback, true, passive, capture);\n}\n\n// Unbind event handler\nexport function off(element, events = '', callback, passive = true, capture = false) {\n    toggleListener.call(this, element, events, callback, false, passive, capture);\n}\n\n// Bind once-only event handler\nexport function once(element, events = '', callback, passive = true, capture = false) {\n    function onceCallback(...args) {\n        off(element, events, onceCallback, passive, capture);\n        callback.apply(this, args);\n    }\n\n    toggleListener.call(this, element, events, onceCallback, true, passive, capture);\n}\n\n// Trigger event\nexport function triggerEvent(element, type = '', bubbles = false, detail = {}) {\n    // Bail if no element\n    if (!is.element(element) || is.empty(type)) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new CustomEvent(type, {\n        bubbles,\n        detail: Object.assign({}, detail, {\n            plyr: this,\n        }),\n    });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n\n// Unbind all cached event listeners\nexport function unbindListeners() {\n    if (this && this.eventListeners) {\n        this.eventListeners.forEach(item => {\n            const { element, type, callback, options } = item;\n            element.removeEventListener(type, callback, options);\n        });\n\n        this.eventListeners = [];\n    }\n}\n","// ==========================================================================\n// Element utils\n// ==========================================================================\n\nimport { toggleListener } from './events';\nimport is from './is';\n\n// Wrap an element\nexport function wrap(elements, wrapper) {\n    // Convert `elements` to an array, if necessary.\n    const targets = elements.length ? elements : [elements];\n\n    // Loops backwards to prevent having to clone the wrapper on the\n    // first element (see `child` below).\n    Array.from(targets)\n        .reverse()\n        .forEach((element, index) => {\n            const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n            // Cache the current parent and sibling.\n            const parent = element.parentNode;\n            const sibling = element.nextSibling;\n\n            // Wrap the element (is automatically removed from its current\n            // parent).\n            child.appendChild(element);\n\n            // If the element had a sibling, insert the wrapper before\n            // the sibling to maintain the HTML structure; otherwise, just\n            // append it to the parent.\n            if (sibling) {\n                parent.insertBefore(child, sibling);\n            } else {\n                parent.appendChild(child);\n            }\n        });\n}\n\n// Set attributes\nexport function setAttributes(element, attributes) {\n    if (!is.element(element) || is.empty(attributes)) {\n        return;\n    }\n\n    Object.entries(attributes).forEach(([\n        key,\n        value,\n    ]) => {\n        element.setAttribute(key, value);\n    });\n}\n\n// Create a DocumentFragment\nexport function createElement(type, attributes, text) {\n    // Create a new <element>\n    const element = document.createElement(type);\n\n    // Set all passed attributes\n    if (is.object(attributes)) {\n        setAttributes(element, attributes);\n    }\n\n    // Add text node\n    if (is.string(text)) {\n        element.innerText = text;\n    }\n\n    // Return built element\n    return element;\n}\n\n// Inaert an element after another\nexport function insertAfter(element, target) {\n    target.parentNode.insertBefore(element, target.nextSibling);\n}\n\n// Insert a DocumentFragment\nexport function insertElement(type, parent, attributes, text) {\n    // Inject the new <element>\n    parent.appendChild(createElement(type, attributes, text));\n}\n\n// Remove element(s)\nexport function removeElement(element) {\n    if (is.nodeList(element) || is.array(element)) {\n        Array.from(element).forEach(removeElement);\n        return;\n    }\n\n    if (!is.element(element) || !is.element(element.parentNode)) {\n        return;\n    }\n\n    element.parentNode.removeChild(element);\n}\n\n// Remove all child elements\nexport function emptyElement(element) {\n    let { length } = element.childNodes;\n\n    while (length > 0) {\n        element.removeChild(element.lastChild);\n        length -= 1;\n    }\n}\n\n// Replace element\nexport function replaceElement(newChild, oldChild) {\n    if (!is.element(oldChild) || !is.element(oldChild.parentNode) || !is.element(newChild)) {\n        return null;\n    }\n\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n\n    return newChild;\n}\n\n// Get an attribute object from a string selector\nexport function getAttributesFromSelector(sel, existingAttributes) {\n    // For example:\n    // '.test' to { class: 'test' }\n    // '#test' to { id: 'test' }\n    // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n    if (!is.string(sel) || is.empty(sel)) {\n        return {};\n    }\n\n    const attributes = {};\n    const existing = existingAttributes;\n\n    sel.split(',').forEach(s => {\n        // Remove whitespace\n        const selector = s.trim();\n        const className = selector.replace('.', '');\n        const stripped = selector.replace(/[[\\]]/g, '');\n\n        // Get the parts and value\n        const parts = stripped.split('=');\n        const key = parts[0];\n        const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n        // Get the first character\n        const start = selector.charAt(0);\n\n        switch (start) {\n            case '.':\n                // Add to existing classname\n                if (is.object(existing) && is.string(existing.class)) {\n                    existing.class += ` ${className}`;\n                }\n\n                attributes.class = className;\n                break;\n\n            case '#':\n                // ID selector\n                attributes.id = selector.replace('#', '');\n                break;\n\n            case '[':\n                // Attribute selector\n                attributes[key] = value;\n\n                break;\n\n            default:\n                break;\n        }\n    });\n\n    return attributes;\n}\n\n// Toggle hidden\nexport function toggleHidden(element, hidden) {\n    if (!is.element(element)) {\n        return;\n    }\n\n    let hide = hidden;\n\n    if (!is.boolean(hide)) {\n        hide = !element.hasAttribute('hidden');\n    }\n\n    if (hide) {\n        element.setAttribute('hidden', '');\n    } else {\n        element.removeAttribute('hidden');\n    }\n}\n\n// Mirror Element.classList.toggle, with IE compatibility for \"force\" argument\nexport function toggleClass(element, className, force) {\n    if (is.element(element)) {\n        let method = 'toggle';\n        if (typeof force !== 'undefined') {\n            method = force ? 'add' : 'remove';\n        }\n\n        element.classList[method](className);\n        return element.classList.contains(className);\n    }\n\n    return null;\n}\n\n// Has class name\nexport function hasClass(element, className) {\n    return is.element(element) && element.classList.contains(className);\n}\n\n// Element matches selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n    return matches.call(element, selector);\n}\n\n// Find all elements\nexport function getElements(selector) {\n    return this.elements.container.querySelectorAll(selector);\n}\n\n// Find a single element\nexport function getElement(selector) {\n    return this.elements.container.querySelector(selector);\n}\n\n// Get the focused element\nexport function getFocusElement() {\n    let focused = document.activeElement;\n\n    if (!focused || focused === document.body) {\n        focused = null;\n    } else {\n        focused = document.querySelector(':focus');\n    }\n\n    return focused;\n}\n\n// Trap focus inside container\nexport function trapFocus(element = null, toggle = false) {\n    if (!is.element(element)) {\n        return;\n    }\n\n    const focusable = getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n    const first = focusable[0];\n    const last = focusable[focusable.length - 1];\n\n    const trap = event => {\n        // Bail if not tab key or not fullscreen\n        if (event.key !== 'Tab' || event.keyCode !== 9) {\n            return;\n        }\n\n        // Get the current focused element\n        const focused = getFocusElement();\n\n        if (focused === last && !event.shiftKey) {\n            // Move focus to first element that can be tabbed if Shift isn't used\n            first.focus();\n            event.preventDefault();\n        } else if (focused === first && event.shiftKey) {\n            // Move focus to last element that can be tabbed if Shift is used\n            last.focus();\n            event.preventDefault();\n        }\n    };\n\n    toggleListener.call(this, this.elements.container, 'keydown', trap, toggle, false);\n}\n\n// Toggle aria-pressed state on a toggle button\n// http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\nexport function toggleState(element, input) {\n    // If multiple elements passed\n    if (is.array(element) || is.nodeList(element)) {\n        Array.from(element).forEach(target => toggleState(target, input));\n        return;\n    }\n\n    // Bail if no target\n    if (!is.element(element)) {\n        return;\n    }\n\n    // Get state\n    const pressed = element.getAttribute('aria-pressed') === 'true';\n    const state = is.boolean(input) ? input : !pressed;\n\n    // Set the attribute on target\n    element.setAttribute('aria-pressed', state);\n}\n","// ==========================================================================\n// Animation utils\n// ==========================================================================\n\nimport { toggleHidden } from './elements';\nimport is from './is';\n\nexport const transitionEndEvent = (() => {\n    const element = document.createElement('span');\n\n    const events = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend',\n    };\n\n    const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n    return is.string(type) ? events[type] : false;\n})();\n\n// Force repaint of element\nexport function repaint(element) {\n    setTimeout(() => {\n        toggleHidden(element, true);\n        element.offsetHeight; // eslint-disable-line\n        toggleHidden(element, false);\n    }, 0);\n}\n","// ==========================================================================\n// Browser sniffing\n// Unfortunately, due to mixed support, UA sniffing is required\n// ==========================================================================\n\nconst browser = {\n    isIE: /* @cc_on!@ */ false || !!document.documentMode,\n    isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n    isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n    isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n};\n\nexport default browser;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport { transitionEndEvent } from './utils/animation';\nimport browser from './utils/browser';\nimport { createElement } from './utils/elements';\nimport is from './utils/is';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, playsinline) {\n        let api = false;\n        let ui = false;\n        const canPlayInline = browser.isIPhone && playsinline && support.playsinline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => !browser.isIPhone && is.function(createElement('video').webkitSetPresentationMode))(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    playsinline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Check directly if codecs specified\n            if (type.includes('codecs=')) {\n                return media.canPlayType(type).replace(/no/, '');\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr HTML5 helpers\n// ==========================================================================\n\nimport support from './support';\nimport { removeElement } from './utils/elements';\nimport { triggerEvent } from './utils/events';\n\nconst html5 = {\n    getSources() {\n        if (!this.isHTML5) {\n            return [];\n        }\n\n        const sources = Array.from(this.media.querySelectorAll('source'));\n\n        // Filter out unsupported sources\n        return sources.filter(source => support.mime.call(this, source.getAttribute('type')));\n    },\n\n    // Get quality levels\n    getQualityOptions() {\n        // Get sizes from <source> elements\n        return html5.getSources\n            .call(this)\n            .map(source => Number(source.getAttribute('size')))\n            .filter(Boolean);\n    },\n\n    extend() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        const player = this;\n\n        // Quality\n        Object.defineProperty(player.media, 'quality', {\n            get() {\n                // Get sources\n                const sources = html5.getSources.call(player);\n                const [source] = sources.filter(source => source.getAttribute('src') === player.source);\n\n                // Return size, if match is found\n                return source && Number(source.getAttribute('size'));\n            },\n            set(input) {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                // Get first match for requested size\n                const source = sources.find(source => Number(source.getAttribute('size')) === input);\n\n                // No matching source found\n                if (!source) {\n                    return;\n                }\n\n                // Get current state\n                const { currentTime, playing } = player;\n\n                // Set new source\n                player.media.src = source.getAttribute('src');\n\n                // Restore time\n                const onLoadedMetaData = () => {\n                    player.currentTime = currentTime;\n                };\n                player.once('loadedmetadata', onLoadedMetaData);\n\n                // Load new source\n                player.media.load();\n\n                // Resume playing\n                if (playing) {\n                    player.play();\n                }\n\n                // Trigger change event\n                triggerEvent.call(player, player.media, 'qualitychange', false, {\n                    quality: input,\n                });\n            },\n        });\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        removeElement(html5.getSources.call(this));\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default html5;\n","// ==========================================================================\n// Object utils\n// ==========================================================================\n\nimport is from './is';\n\n// Clone nested objects\nexport function cloneDeep(object) {\n    return JSON.parse(JSON.stringify(object));\n}\n\n// Get a nested value in an object\nexport function getDeep(object, path) {\n    return path.split('.').reduce((obj, key) => obj && obj[key], object);\n}\n\n// Deep extend destination object with N more objects\nexport function extend(target = {}, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n\n    const source = sources.shift();\n\n    if (!is.object(source)) {\n        return target;\n    }\n\n    Object.keys(source).forEach(key => {\n        if (is.object(source[key])) {\n            if (!Object.keys(target).includes(key)) {\n                Object.assign(target, { [key]: {} });\n            }\n\n            extend(target[key], source[key]);\n        } else {\n            Object.assign(target, { [key]: source[key] });\n        }\n    });\n\n    return extend(target, ...sources);\n}\n","// ==========================================================================\n// String utils\n// ==========================================================================\n\nimport is from './is';\n\n// Generate a random ID\nexport function generateId(prefix) {\n    return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n}\n\n// Format string\nexport function format(input, ...args) {\n    if (is.empty(input)) {\n        return input;\n    }\n\n    return input.toString().replace(/{(\\d+)}/g, (match, i) => args[i].toString());\n}\n\n// Get percentage\nexport function getPercentage(current, max) {\n    if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n        return 0;\n    }\n\n    return (current / max * 100).toFixed(2);\n}\n\n// Replace all occurances of a string in a string\nexport function replaceAll(input = '', find = '', replace = '') {\n    return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n}\n\n// Convert to title case\nexport function toTitleCase(input = '') {\n    return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n}\n\n// Convert string to pascalCase\nexport function toPascalCase(input = '') {\n    let string = input.toString();\n\n    // Convert kebab case\n    string = replaceAll(string, '-', ' ');\n\n    // Convert snake case\n    string = replaceAll(string, '_', ' ');\n\n    // Convert to title case\n    string = toTitleCase(string);\n\n    // Convert to pascal case\n    return replaceAll(string, ' ', '');\n}\n\n// Convert string to pascalCase\nexport function toCamelCase(input = '') {\n    let string = input.toString();\n\n    // Convert to pascal case\n    string = toPascalCase(string);\n\n    // Convert first character to lowercase\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\n// Remove HTML from a string\nexport function stripHTML(source) {\n    const fragment = document.createDocumentFragment();\n    const element = document.createElement('div');\n    fragment.appendChild(element);\n    element.innerHTML = source;\n    return fragment.firstChild.innerText;\n}\n\n// Like outerHTML, but also works for DocumentFragment\nexport function getHTML(element) {\n    const wrapper = document.createElement('div');\n    wrapper.appendChild(element);\n    return wrapper.innerHTML;\n}\n","// ==========================================================================\n// Plyr internationalization\n// ==========================================================================\n\nimport is from './utils/is';\nimport { getDeep } from './utils/objects';\nimport { replaceAll } from './utils/strings';\n\nconst i18n = {\n    get(key = '', config = {}) {\n        if (is.empty(key) || is.empty(config)) {\n            return '';\n        }\n\n        let string = getDeep(config.i18n, key);\n\n        if (is.empty(string)) {\n            return '';\n        }\n\n        const replace = {\n            '{seektime}': config.seekTime,\n            '{title}': config.title,\n        };\n\n        Object.entries(replace).forEach(([\n            key,\n            value,\n        ]) => {\n            string = replaceAll(string, key, value);\n        });\n\n        return string;\n    },\n};\n\nexport default i18n;\n","// ==========================================================================\n// Array utils\n// ==========================================================================\n\nimport is from './is';\n\n// Remove duplicates in an array\nexport function dedupe(array) {\n    if (!is.array(array)) {\n        return array;\n    }\n\n    return array.filter((item, index) => array.indexOf(item) === index);\n}\n\n// Get the closest value in an array\nexport function closest(array, value) {\n    if (!is.array(array) || !array.length) {\n        return null;\n    }\n\n    return array.reduce((prev, curr) => (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev));\n}\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport is from './utils/is';\nimport { extend } from './utils/objects';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported || !this.enabled) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Sprite loader\n// ==========================================================================\n\nimport Storage from './../storage';\nimport is from './is';\n\n// Load an external SVG sprite\nexport default function loadSprite(url, id) {\n    if (!is.string(url)) {\n        return;\n    }\n\n    const prefix = 'cache';\n    const hasId = is.string(id);\n    let isCached = false;\n\n    const exists = () => document.getElementById(id) !== null;\n\n    const update = (container, data) => {\n        container.innerHTML = data;\n\n        // Check again incase of race condition\n        if (hasId && exists()) {\n            return;\n        }\n\n        // Inject the SVG to the body\n        document.body.insertAdjacentElement('afterbegin', container);\n    };\n\n    // Only load once if ID set\n    if (!hasId || !exists()) {\n        const useStorage = Storage.supported;\n\n        // Create container\n        const container = document.createElement('div');\n        container.setAttribute('hidden', '');\n\n        if (hasId) {\n            container.setAttribute('id', id);\n        }\n\n        // Check in cache\n        if (useStorage) {\n            const cached = window.localStorage.getItem(`${prefix}-${id}`);\n            isCached = cached !== null;\n\n            if (isCached) {\n                const data = JSON.parse(cached);\n                update(container, data.content);\n            }\n        }\n\n        // Get the sprite\n        fetch(url)\n            .then(result => {\n                if (is.empty(result)) {\n                    return;\n                }\n\n                if (useStorage) {\n                    window.localStorage.setItem(\n                        `${prefix}-${id}`,\n                        JSON.stringify({\n                            content: result,\n                        }),\n                    );\n                }\n\n                update(container, result);\n            })\n            .catch(() => {});\n    }\n}\n","// ==========================================================================\n// Time utils\n// ==========================================================================\n\nimport is from './is';\n\n// Time helpers\nexport const getHours = value => parseInt((value / 60 / 60) % 60, 10);\nexport const getMinutes = value => parseInt((value / 60) % 60, 10);\nexport const getSeconds = value => parseInt(value % 60, 10);\n\n// Format time to UI friendly string\nexport function formatTime(time = 0, displayHours = false, inverted = false) {\n    // Bail if the value isn't a number\n    if (!is.number(time)) {\n        return formatTime(null, displayHours, inverted);\n    }\n\n    // Format time component to add leading zero\n    const format = value => `0${value}`.slice(-2);\n\n    // Breakdown to hours, mins, secs\n    let hours = getHours(time);\n    const mins = getMinutes(time);\n    const secs = getSeconds(time);\n\n    // Do we need to display hours?\n    if (displayHours || hours > 0) {\n        hours = `${hours}:`;\n    } else {\n        hours = '';\n    }\n\n    // Render\n    return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n}\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport captions from './captions';\nimport html5 from './html5';\nimport i18n from './i18n';\nimport support from './support';\nimport { repaint, transitionEndEvent } from './utils/animation';\nimport { dedupe } from './utils/arrays';\nimport browser from './utils/browser';\nimport { createElement, emptyElement, getAttributesFromSelector, getElement, getElements, hasClass, removeElement, setAttributes, toggleClass, toggleHidden, toggleState } from './utils/elements';\nimport { once } from './utils/events';\nimport is from './utils/is';\nimport loadSprite from './utils/loadSprite';\nimport { extend } from './utils/objects';\nimport { getPercentage, replaceAll, toCamelCase, toTitleCase } from './utils/strings';\nimport { formatTime, getHours } from './utils/time';\n\nconst controls = {\n    // Get icon URL\n    getIconUrl() {\n        const url = new URL(this.config.iconUrl, window.location);\n        const cors = url.host !== window.location.host || (browser.isIE && !window.svg4everybody);\n\n        return {\n            url: this.config.iconUrl,\n            cors,\n        };\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: getElements.call(this, this.config.selectors.buttons.play),\n                pause: getElement.call(this, this.config.selectors.buttons.pause),\n                restart: getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: getElement.call(this, this.config.selectors.buttons.mute),\n                pip: getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: getElement.call(this, this.config.selectors.buttons.settings),\n                captions: getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: getElement.call(this, this.config.selectors.inputs.seek),\n                volume: getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: getElement.call(this, this.config.selectors.display.buffer),\n                currentTime: getElement.call(this, this.config.selectors.display.currentTime),\n                duration: getElement.call(this, this.config.selectors.display.duration),\n            };\n\n            // Seek tooltip\n            if (is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.cors ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        setAttributes(\n            icon,\n            extend(attributes, {\n                role: 'presentation',\n                focusable: 'false',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = i18n.get(type, this.config);\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (is.empty(text)) {\n            return null;\n        }\n\n        const badge = createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = toCamelCase(buttonType);\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (buttonType) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = buttonType;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        extend(attributes, getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = createElement(\n            'label',\n            {\n                for: attributes.id,\n                id: `${attributes.id}-label`,\n                class: this.config.classNames.hidden,\n            },\n            i18n.get(type, this.config),\n        );\n\n        // Seek input\n        const input = createElement(\n            'input',\n            extend(\n                getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                    // A11y fixes for https://github.com/sampotts/plyr/issues/905\n                    role: 'slider',\n                    'aria-labelledby': `${attributes.id}-label`,\n                    'aria-valuemin': 0,\n                    'aria-valuemax': 100,\n                    'aria-valuenow': 0,\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = createElement(\n            'progress',\n            extend(\n                getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                    role: 'presentation',\n                    'aria-hidden': true,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = i18n.get('played', this.config);\n                    break;\n\n                case 'buffer':\n                    suffix = i18n.get('buffered', this.config);\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.innerText = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const attributes = getAttributesFromSelector(this.config.selectors.display[type]);\n\n        const container = createElement(\n            'div',\n            extend(attributes, {\n                class: `plyr__time ${attributes.class}`,\n                'aria-label': i18n.get(type, this.config),\n            }),\n            '00:00',\n        );\n\n        // Reference for updates\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem({ value, list, type, title, badge = null, checked = false }) {\n        const item = createElement('li');\n\n        const label = createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = createElement(\n            'input',\n            extend(getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = createElement('span', { hidden: '' });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!is.element(target) || !is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const forceHours = getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.innerText = formatTime(time, forceHours, inverted);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (is.element(this.elements.inputs.volume)) {\n            controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (is.element(this.elements.buttons.mute)) {\n            toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        const setProgress = (target, input) => {\n            const value = is.number(input) ? input : 0;\n            const progress = is.element(target) ? target : this.elements.display.buffer;\n\n            // Update value and label\n            if (is.element(progress)) {\n                progress.value = value;\n\n                // Update text label inside\n                const label = progress.getElementsByTagName('span')[0];\n                if (is.element(label)) {\n                    label.childNodes[0].nodeValue = value;\n                }\n            }\n        };\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                case 'seeked':\n                    value = getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        controls.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    setProgress(this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // Get range from event if event passed\n        const range = is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set aria value for https://github.com/sampotts/plyr/issues/905\n        range.setAttribute('aria-valuenow', range.value);\n\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (!this.config.tooltips.seek || !is.element(this.elements.inputs.seek) || !is.element(this.elements.display.seekTooltip) || this.duration === 0) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.progress.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        const toggle = toggle => {\n            toggleClass(this.elements.display.seekTooltip, visible, toggle);\n        };\n\n        // Hide on touch\n        if (this.touch) {\n            toggle(false);\n            return;\n        }\n\n        // Determine percentage, if already visible\n        if (is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            toggle(event.type === 'mouseenter');\n        }\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        controls.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        controls.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded or durationchange events\n    durationUpdate() {\n        // Bail if no ui or durationchange event triggered after playing/seek when invertTime is false\n        if (!this.supported.ui || (!this.config.invertTime && this.currentTime)) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        toggleHidden(this.elements.settings.tabs[setting], !toggle);\n    },\n\n    // Set the quality menu\n    setQualityMenu(options) {\n        // Menu required\n        if (!is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on uniqueness and config\n        if (is.array(options)) {\n            this.options.quality = dedupe(options).filter(quality => this.config.quality.options.includes(quality));\n        }\n\n        // Toggle the pane and tab\n        const toggle = !is.empty(this.options.quality) && this.options.quality.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            const label = i18n.get(`qualityBadge.${quality}`, this.config);\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        // Sort options by the config and then render options\n        this.options.quality\n            .sort((a, b) => {\n                const sorting = this.config.quality.options;\n                return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n            })\n            .forEach(quality => {\n                controls.createMenuItem.call(this, {\n                    value: quality,\n                    list,\n                    type,\n                    title: controls.getLabel.call(this, 'quality', quality),\n                    badge: getBadge(quality),\n                });\n            });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? i18n.get('normal', this.config) : `${value}&times;`;\n\n            case 'quality':\n                if (is.number(value)) {\n                    const label = i18n.get(`qualityLabel.${value}`, this.config);\n\n                    if (!label.length) {\n                        return `${value}p`;\n                    }\n\n                    return label;\n                }\n\n                return toTitleCase(value);\n\n            case 'captions':\n                return captions.getLabel.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container, input) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.currentTrack;\n                break;\n\n            default:\n                value = !is.empty(input) ? input : this[setting];\n\n                // Get default\n                if (is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!is.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // If there's no list it means it's not been rendered...\n        if (!is.element(list)) {\n            return;\n        }\n\n        // Update the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n\n        // Find the radio option and check it\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (is.element(target)) {\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        toggleHidden(this.elements.settings.tabs.loop, false);\n        toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        emptyElement(list);\n\n        options.forEach(option => {\n            const item = createElement('li');\n\n            const button = createElement(\n                'button',\n                extend(getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                i18n.get(option, this.config)\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n        const tracks = captions.getTracks.call(this);\n\n        // Toggle the pane and tab\n        controls.toggleTab.call(this, type, tracks.length);\n\n        // Empty the menu\n        emptyElement(list);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If there's no captions, bail\n        if (!tracks.length) {\n            return;\n        }\n\n        // Generate options data\n        const options = tracks.map((track, value) => ({\n            value,\n            checked: this.captions.active && this.currentTrack === value,\n            title: captions.getLabel.call(this, track),\n            badge: track.language && controls.createBadge.call(this, track.language.toUpperCase()),\n            list,\n            type: 'language',\n        }));\n\n        // Add the \"Disabled\" option to turn off captions\n        options.unshift({\n            value: -1,\n            checked: !this.captions.active,\n            title: i18n.get('disabled', this.config),\n            list,\n            type: 'language',\n        });\n\n        // Generate options\n        options.forEach(controls.createMenuItem.bind(this));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Do nothing if not selected\n        if (!this.config.controls.includes('settings') || !this.config.settings.includes('speed')) {\n            return;\n        }\n\n        // Menu required\n        if (!is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the speed options\n        if (is.array(options)) {\n            this.options.speed = options;\n        } else if (this.isHTML5 || this.isVimeo) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n                2.5,\n                3,\n                3.5,\n                4,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !is.empty(this.options.speed) && this.options.speed.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Empty the menu\n        emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            controls.createMenuItem.call(this, {\n                value: speed,\n                list,\n                type,\n                title: controls.getLabel.call(this, 'speed', speed),\n            });\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Check if we need to hide/show the settings menu\n    checkMenu() {\n        const { tabs } = this.elements.settings;\n        const visible = !is.empty(tabs) && Object.values(tabs).some(tab => !tab.hidden);\n\n        toggleHidden(this.elements.settings.menu, !visible);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!is.element(form) || !is.element(button)) {\n            return;\n        }\n\n        const show = is.boolean(event) ? event : is.element(form) && form.hasAttribute('hidden');\n\n        if (is.event(event)) {\n            const isMenuItem = is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (is.element(form)) {\n            toggleHidden(form, !show);\n            toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.removeAttribute('hidden');\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(target = '') {\n        const { menu } = this.elements.settings;\n        const pane = document.getElementById(target);\n\n        // Nothing to show, bail\n        if (!is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"]:not([hidden])');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            once.call(this, container, transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        toggleHidden(current, true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        toggleHidden(pane, false);\n\n        const tabs = getElements.call(this, `[aria-controls=\"${target}\"]`);\n        Array.from(tabs).forEach(tab => {\n            tab.setAttribute('aria-expanded', true);\n        });\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = createElement('div', getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = createElement('div', getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = createElement(\n                    'span',\n                    {\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !is.empty(this.config.settings)) {\n            const menu = createElement('div', {\n                class: 'plyr__menu',\n                hidden: '',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                hidden: '',\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = createElement('div');\n\n            const home = createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = createElement(\n                    'button',\n                    extend(getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    i18n.get(type, this.config),\n                );\n\n                const value = createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    hidden: '',\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                });\n\n                const back = createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    i18n.get(type, this.config),\n                );\n\n                pane.appendChild(back);\n\n                const options = createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.isHTML5) {\n            controls.setQualityMenu.call(this, html5.getQualityOptions.call(this));\n        }\n\n        controls.setSpeedMenu.call(this);\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.cors) {\n                loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // Set template properties\n        const props = {\n            id: this.id,\n            seektime: this.config.seekTime,\n            title: this.config.title,\n        };\n        let update = true;\n\n        if (is.string(this.config.controls) || is.element(this.config.controls)) {\n            // String or HTMLElement passed as the option\n            container = this.config.controls;\n        } else if (is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls.call(this, props);\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: captions.getLabel.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n            update = false;\n        }\n\n        // Replace props with their value\n        const replace = input => {\n            let result = input;\n\n            Object.entries(props).forEach(([\n                key,\n                value,\n            ]) => {\n                result = replaceAll(result, `{${key}}`, value);\n            });\n\n            return result;\n        };\n\n        // Update markup\n        if (update) {\n            if (is.string(this.config.controls)) {\n                container = replace(container);\n            } else if (is.element(container)) {\n                container.innerHTML = replace(container.innerHTML);\n            }\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (is.element(container)) {\n            target.appendChild(container);\n        } else if (container) {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!is.element(this.elements.controls)) {\n            controls.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                toggleClass(label, this.config.classNames.hidden, false);\n                toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Fetch wrapper\n// Using XHR to avoid issues with older browsers\n// ==========================================================================\n\nexport default function fetch(url, responseType = 'text') {\n    return new Promise((resolve, reject) => {\n        try {\n            const request = new XMLHttpRequest();\n\n            // Check for CORS support\n            if (!('withCredentials' in request)) {\n                return;\n            }\n\n            request.addEventListener('load', () => {\n                if (responseType === 'text') {\n                    try {\n                        resolve(JSON.parse(request.responseText));\n                    } catch (e) {\n                        resolve(request.responseText);\n                    }\n                } else {\n                    resolve(request.response);\n                }\n            });\n\n            request.addEventListener('error', () => {\n                throw new Error(request.statusText);\n            });\n\n            request.open('GET', url, true);\n\n            // Set the required response type\n            request.responseType = responseType;\n\n            request.send();\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n","// ==========================================================================\n// URL utils\n// ==========================================================================\n\nimport is from './is';\n\n/**\n * Parse a string to a URL object\n * @param {string} input - the URL to be parsed\n * @param {boolean} safe - failsafe parsing\n */\nexport function parseUrl(input, safe = true) {\n    let url = input;\n\n    if (safe) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        url = parser.href;\n    }\n\n    try {\n        return new URL(url);\n    } catch (e) {\n        return null;\n    }\n}\n\n// Convert object to URLSearchParams\nexport function buildUrlParams(input) {\n    const params = new URLSearchParams();\n\n    if (is.object(input)) {\n        Object.entries(input).forEach(([\n            key,\n            value,\n        ]) => {\n            params.set(key, value);\n        });\n    }\n\n    return params;\n}\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport browser from './utils/browser';\nimport { createElement, emptyElement, getAttributesFromSelector, insertAfter, removeElement, toggleClass } from './utils/elements';\nimport { on, triggerEvent } from './utils/events';\nimport fetch from './utils/fetch';\nimport is from './utils/is';\nimport { getHTML } from './utils/strings';\nimport { parseUrl } from './utils/urls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!is.element(this.elements.captions)) {\n            this.elements.captions = createElement('div', getAttributesFromSelector(this.config.selectors.captions));\n\n            insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const url = parseUrl(src);\n\n                if (url !== null && url.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(url.protocol)) {\n                    fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!is.boolean(active)) {\n            ({ active } = this.config.captions);\n        }\n\n        // Get language from storage, fallback to config\n        let language = this.storage.get('language') || this.config.captions.language;\n        if (language === 'auto') {\n            [language] = (navigator.language || navigator.userLanguage).split('-');\n        }\n        // Set language and show if active\n        captions.setLanguage.call(this, language, active);\n\n        // Watch changes to textTracks and update captions menu\n        if (this.isHTML5) {\n            const trackEvents = this.config.captions.update ? 'addtrack removetrack' : 'removetrack';\n            on.call(this, this.media.textTracks, trackEvents, captions.update.bind(this));\n        }\n\n        // Update available languages in list next tick (the event must not be triggered before the listeners)\n        setTimeout(captions.update.bind(this), 0);\n    },\n\n    update() {\n        const tracks = captions.getTracks.call(this, true);\n        // Get the wanted language\n        const { language, meta } = this.captions;\n\n        // Handle tracks (add event listener and \"pseudo\"-default)\n        if (this.isHTML5 && this.isVideo) {\n            tracks.filter(track => !meta.get(track)).forEach(track => {\n                this.debug.log('Track added', track);\n                // Attempt to store if the original dom element was \"default\"\n                meta.set(track, {\n                    default: track.mode === 'showing',\n                });\n\n                // Turn off native caption rendering to avoid double captions\n                track.mode = 'hidden';\n\n                // Add event listener for cue changes\n                on.call(this, track, 'cuechange', () => captions.updateCues.call(this));\n            });\n        }\n\n        const trackRemoved = !tracks.find(track => track === this.captions.currentTrackNode);\n        const firstMatch = this.language !== language && tracks.find(track => track.language === language);\n\n        // Update language if removed or first matching track added\n        if (trackRemoved || firstMatch) {\n            captions.setLanguage.call(this, language, this.config.captions.active);\n        }\n\n        // Enable or disable captions based on track length\n        toggleClass(this.elements.container, this.config.classNames.captions.enabled, !is.empty(tracks));\n\n        // Update available languages in list\n        if ((this.config.controls || []).includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    set(index, setLanguage = true, show = true) {\n        const tracks = captions.getTracks.call(this);\n\n        // Disable captions if setting to -1\n        if (index === -1) {\n            this.toggleCaptions(false);\n            return;\n        }\n\n        if (!is.number(index)) {\n            this.debug.warn('Invalid caption argument', index);\n            return;\n        }\n\n        if (!(index in tracks)) {\n            this.debug.warn('Track not found', index);\n            return;\n        }\n\n        if (this.captions.currentTrack !== index) {\n            this.captions.currentTrack = index;\n            const track = captions.getCurrentTrack.call(this);\n            const { language } = track || {};\n\n            // Store reference to node for invalidation on remove\n            this.captions.currentTrackNode = track;\n\n            // Prevent setting language in some cases, since it can violate user's intentions\n            if (setLanguage) {\n                this.captions.language = language;\n            }\n\n            // Handle Vimeo captions\n            if (this.isVimeo) {\n                this.embed.enableTextTrack(language);\n            }\n\n            // Trigger event\n            triggerEvent.call(this, this.media, 'languagechange');\n        }\n\n        if (this.isHTML5 && this.isVideo) {\n            // If we change the active track while a cue is already displayed we need to update it\n            captions.updateCues.call(this);\n        }\n\n        // Show captions\n        if (show) {\n            this.toggleCaptions(true);\n        }\n    },\n\n    setLanguage(language, show = true) {\n        if (!is.string(language)) {\n            this.debug.warn('Invalid language argument', language);\n            return;\n        }\n        // Normalize\n        this.captions.language = language.toLowerCase();\n\n        // Set currentTrack\n        const tracks = captions.getTracks.call(this);\n        const track = captions.getCurrentTrack.call(this, true);\n        captions.set.call(this, tracks.indexOf(track), false, show);\n    },\n\n    // Get current valid caption tracks\n    // If update is false it will also ignore tracks without metadata\n    // This is used to \"freeze\" the language options when captions.update is false\n    getTracks(update = false) {\n        // Handle media or textTracks missing or null\n        const tracks = Array.from((this.media || {}).textTracks || []);\n        // For HTML5, use cache instead of current tracks when it exists (if captions.update is false)\n        // Filter out removed tracks and tracks that aren't captions/subtitles (for example metadata)\n        return tracks.filter(track => !this.isHTML5 || update || this.captions.meta.has(track)).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack(fromLanguage = false) {\n        const tracks = captions.getTracks.call(this);\n        const sortIsDefault = track => Number((this.captions.meta.get(track) || {}).default);\n        const sorted = Array.from(tracks).sort((a, b) => sortIsDefault(b) - sortIsDefault(a));\n        return (!fromLanguage && tracks[this.currentTrack]) || sorted.find(track => track.language === this.captions.language) || sorted[0];\n    },\n\n    // Get UI label for track\n    getLabel(track) {\n        let currentTrack = track;\n\n        if (!is.track(currentTrack) && support.textTracks && this.captions.active) {\n            currentTrack = captions.getCurrentTrack.call(this);\n        }\n\n        if (is.track(currentTrack)) {\n            if (!is.empty(currentTrack.label)) {\n                return currentTrack.label;\n            }\n\n            if (!is.empty(currentTrack.language)) {\n                return track.language.toUpperCase();\n            }\n\n            return i18n.get('enabled', this.config);\n        }\n\n        return i18n.get('disabled', this.config);\n    },\n\n    // Update captions using current track's active cues\n    // Also optional array argument in case there isn't any track (ex: vimeo)\n    updateCues(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (!is.element(this.elements.captions)) {\n            this.debug.warn('No captions element to render to');\n            return;\n        }\n\n        // Only accept array or empty input\n        if (!is.nullOrUndefined(input) && !Array.isArray(input)) {\n            this.debug.warn('updateCues: Invalid input', input);\n            return;\n        }\n\n        let cues = input;\n\n        // Get cues from track\n        if (!cues) {\n            const track = captions.getCurrentTrack.call(this);\n            cues = Array.from((track || {}).activeCues || [])\n                .map(cue => cue.getCueAsHTML())\n                .map(getHTML);\n        }\n\n        // Set new caption text\n        const content = cues.map(cueText => cueText.trim()).join('\\n');\n        const changed = content !== this.elements.captions.innerHTML;\n\n        if (changed) {\n            // Empty the container and create a new child element\n            emptyElement(this.elements.captions);\n            const caption = createElement('span', getAttributesFromSelector(this.config.selectors.caption));\n            caption.innerHTML = content;\n            this.elements.captions.appendChild(caption);\n\n            // Trigger event\n            triggerEvent.call(this, this.media, 'cuechange');\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Reset to start when playback ended\n    resetOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.3.12/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 576,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240,\n            'default', // YouTube's \"auto\"\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n            2.5,\n            3,\n            3.5,\n            4,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: 'auto',\n        // Listen to new tracks added after Plyr is initialized.\n        // This is needed for streaming captions, but may result in unselectable options\n        update: false,\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        // 'restart',\n        // 'rewind',\n        'play',\n        // 'fast-forward',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime}s',\n        play: 'Play',\n        pause: 'Pause',\n        fastForward: 'Forward {seektime}s',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        normal: 'Normal',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        disabled: 'Disabled',\n        enabled: 'Enabled',\n        advertisement: 'Ad',\n        qualityBadge: {\n            2160: '4K',\n            1440: 'HD',\n            1080: 'HD',\n            720: 'HD',\n            576: 'SD',\n            480: 'SD',\n        },\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            sdk: 'https://player.vimeo.com/api/player.js',\n            iframe: 'https://player.vimeo.com/video/{0}?{1}',\n            api: 'https://vimeo.com/api/v2/video/{0}.json',\n        },\n        youtube: {\n            sdk: 'https://www.youtube.com/iframe_api',\n            api: 'https://www.googleapis.com/youtube/v3/videos?id={0}&key={1}&fields=items(snippet(title))&part=snippet',\n        },\n        googleIMA: {\n            sdk: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress__buffer',\n            loop: '.plyr__progress__loop', // Used later\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        caption: '.plyr__caption',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        embedContainer: 'plyr__video-embed__container',\n        poster: 'plyr__poster',\n        posterEnabled: 'plyr__poster-enabled',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        playing: 'plyr--playing',\n        paused: 'plyr--paused',\n        stopped: 'plyr--stopped',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\n/**\n * Get provider by URL\n * @param {string} url\n */\nexport function getProviderByUrl(url) {\n    // YouTube\n    if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n        return providers.youtube;\n    }\n\n    // Vimeo\n    if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(url)) {\n        return providers.vimeo;\n    }\n\n    return null;\n}\n\nexport default { providers, types };\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport browser from './utils/browser';\nimport { hasClass, toggleClass, toggleState, trapFocus } from './utils/elements';\nimport { on, triggerEvent } from './utils/events';\nimport is from './utils/is';\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (is.element(button)) {\n        toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    triggerEvent.call(this.player, this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.property = Fullscreen.property;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        on.call(this.player, document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        on.call(this.player, this.player.elements.container, 'dblclick', event => {\n            // Ignore double click in controls\n            if (is.element(this.player.elements.controls) && this.player.elements.controls.contains(event.target)) {\n                return;\n            }\n\n            this.toggle();\n        });\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (is.function(document.exitFullscreen)) {\n            return '';\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (is.function(document[`${pre}ExitFullscreen`]) || is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get property() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        return (\n            (Fullscreen.native || this.player.config.fullscreen.fallback) &&\n            this.player.config.fullscreen.enabled &&\n            this.player.supported.ui &&\n            this.player.isVideo\n        );\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.property}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullscreen();\n        } else if (!is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.property}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            (document.cancelFullScreen || document.exitFullscreen).call(document);\n        } else if (!is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.property}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Load image avoiding xhr/fetch CORS issues\n// Server status can't be obtained this way unfortunately, so this uses \"naturalWidth\" to determine if the image has loaded\n// By default it checks if it is at least 1px, but you can add a second argument to change this\n// ==========================================================================\n\nexport default function loadImage(src, minWidth = 1) {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n\n        const handler = () => {\n            delete image.onload;\n            delete image.onerror;\n            (image.naturalWidth >= minWidth ? resolve : reject)(image);\n        };\n\n        Object.assign(image, { onload: handler, onerror: handler, src });\n    });\n}\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport captions from './captions';\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport browser from './utils/browser';\nimport { getElement, toggleClass, toggleState } from './utils/elements';\nimport { triggerEvent } from './utils/events';\nimport is from './utils/is';\nimport loadImage from './utils/loadImage';\n\nconst ui = {\n    addStyleHook() {\n        toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup captions for HTML5\n        if (this.isHTML5) {\n            captions.setup.call(this);\n        }\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = 1;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality setting\n        this.quality = null;\n\n        // Reset volume display\n        controls.updateVolume.call(this);\n\n        // Reset time display\n        controls.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Check for picture-in-picture support\n        toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n        // Check for airplay support\n        toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n        // Add iOS class\n        toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n        // Add touch class\n        toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            triggerEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n\n        // Assure the poster image is set, if the property was added before the element was created\n        if (this.poster && this.elements.poster && !this.elements.poster.style.backgroundImage) {\n            ui.setPoster.call(this, this.poster);\n        }\n\n        // Manually set the duration if user has overridden it.\n        // The event listeners for it doesn't get called if preload is disabled (#701)\n        if (this.config.duration) {\n            controls.durationUpdate.call(this);\n        }\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = i18n.get('play', this.config);\n\n        // If there's a media title set, use that for the label\n        if (is.string(this.config.title) && !is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = getElement.call(this, 'iframe');\n\n            if (!is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !is.empty(this.config.title) ? this.config.title : 'video';\n            const format = i18n.get('frameTitle', this.config);\n\n            iframe.setAttribute('title', format.replace('{title}', title));\n        }\n    },\n\n    // Toggle poster\n    togglePoster(enable) {\n        toggleClass(this.elements.container, this.config.classNames.posterEnabled, enable);\n    },\n\n    // Set the poster image (async)\n    setPoster(poster) {\n        // Set property regardless of validity\n        this.media.setAttribute('poster', poster);\n\n        // Bail if element is missing\n        if (!is.element(this.elements.poster)) {\n            return Promise.reject();\n        }\n\n        // Load the image, and set poster if successful\n        const loadPromise = loadImage(poster).then(() => {\n            this.elements.poster.style.backgroundImage = `url('${poster}')`;\n            Object.assign(this.elements.poster.style, {\n                backgroundImage: `url('${poster}')`,\n                // Reset backgroundSize as well (since it can be set to \"cover\" for padded thumbnails for youtube)\n                backgroundSize: '',\n            });\n            ui.togglePoster.call(this, true);\n            return poster;\n        });\n\n        // Hide the element if the poster can't be loaded (otherwise it will just be a black element covering the video)\n        loadPromise.catch(() => ui.togglePoster.call(this, false));\n\n        // Return the promise so the caller can use it as well\n        return loadPromise;\n    },\n\n    // Check playing state\n    checkPlaying(event) {\n        // Class hooks\n        toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        toggleClass(this.elements.container, this.config.classNames.paused, this.paused);\n        toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped);\n\n        // Set ARIA state\n        toggleState(this.elements.buttons.play, this.playing);\n\n        // Only update controls on non timeupdate events\n        if (is.event(event) && event.type === 'timeupdate') {\n            return;\n        }\n\n        // Toggle controls\n        ui.toggleControls.call(this);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Update progress bar loading class state\n            toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Update controls visibility\n            ui.toggleControls.call(this);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Toggle controls based on state and `force` argument\n    toggleControls(force) {\n        const { controls } = this.elements;\n\n        if (controls && this.config.hideControls) {\n            // Show controls if force, loading, paused, or button interaction, otherwise hide\n            this.toggleControls(Boolean(force || this.loading || this.paused || controls.pressed || controls.hover));\n        }\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport controls from './controls';\nimport ui from './ui';\nimport browser from './utils/browser';\nimport { getElement, getElements, getFocusElement, matches, toggleClass, toggleHidden } from './utils/elements';\nimport { on, once, toggleListener, triggerEvent } from './utils/events';\nimport is from './utils/is';\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.firstTouch = this.firstTouch.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = getFocusElement();\n            if (is.element(focused) && (\n                focused !== this.player.elements.inputs.seek &&\n                matches(focused, this.player.config.selectors.editable))\n            ) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                    /* case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n    // Device is touch enabled\n    firstTouch() {\n        this.player.touch = true;\n        \n        // Add touch class\n        toggleClass(this.player.elements.container, this.player.config.classNames.isTouch, true);\n\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            toggleListener.call(this.player, window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        toggleListener.call(this.player, document.body, 'click', this.toggleMenu, toggle);\n\n        // Detect touch by events\n        once.call(this.player, document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            on.call(this.player, this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        on.call(this.player, this.player.elements.container, 'focusout', event => {\n            toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n        // Add classname to tabbed elements\n        on.call(this.player, this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                toggleClass(getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls on mouse events and entering fullscreen\n        on.call(this.player, this.player.elements.container, 'mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen', event => {\n            const { controls } = this.player.elements;\n\n            // Remove button states for fullscreen\n            if (event.type === 'enterfullscreen') {\n                controls.pressed = false;\n                controls.hover = false;\n            }\n\n            // Show, then hide after a timeout unless another control event occurs\n            const show = [\n                'touchstart',\n                'touchmove',\n                'mousemove',\n            ].includes(event.type);\n\n            let delay = 0;\n\n            if (show) {\n                ui.toggleControls.call(this.player, true);\n                // Use longer timeout for touch devices\n                delay = this.player.touch ? 3000 : 2000;\n            }\n\n            // Clear timer\n            clearTimeout(this.player.timers.controls);\n            // Timer to prevent flicker when seeking\n            this.player.timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n        });\n    }\n\n    // Listen for media events\n    media() {\n\n        // Time change on media\n        on.call(this.player, this.player.media, 'timeupdate seeking seeked', event => controls.timeUpdate.call(this.player, event));\n\n        // Display duration\n        on.call(this.player, this.player.media, 'durationchange loadeddata loadedmetadata', event => controls.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        on.call(this.player, this.player.media, 'canplay', () => {\n            toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        on.call(this.player, this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.resetOnEnd) {\n                // Restart\n                this.player.restart();\n            }\n        });\n\n        // Check for buffer progress\n        on.call(this.player, this.player.media, 'progress playing seeking seeked', event => controls.updateProgress.call(this.player, event));\n\n        // Handle volume changes\n        on.call(this.player, this.player.media, 'volumechange', event => controls.updateVolume.call(this.player, event));\n\n        // Handle play/pause\n        on.call(this.player, this.player.media, 'playing play pause ended emptied timeupdate', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading state\n        on.call(this.player, this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // If autoplay, then load advertisement if required\n        // TODO: Show some sort of loading state while the ad manager loads else there's a delay before ad shows\n        on.call(this.player, this.player.media, 'playing', () => {\n            if (!this.player.ads) {\n                return;\n            }\n\n            // If ads are enabled, wait for them first\n            if (this.player.ads.enabled && !this.player.ads.initialized) {\n                // Wait for manager response\n                this.player.ads.managerPromise.then(() => this.player.ads.play()).catch(() => this.player.play());\n            }\n        });\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            on.call(this.player, wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && this.player.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            on.call(this.player,\n                this.player.elements.wrapper,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        on.call(this.player, this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({\n                volume: this.player.volume,\n                muted: this.player.muted,\n            });\n        });\n\n        // Speed change\n        on.call(this.player, this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({\n                speed: this.player.speed,\n            });\n        });\n\n        // Quality request\n        on.call(this.player, this.player.media, 'qualityrequested', event => {\n            // Save to storage\n            this.player.storage.set({\n                quality: event.detail.quality,\n            });\n        });\n\n        // Quality change\n        on.call(this.player, this.player.media, 'qualitychange', event => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality', null, event.detail.quality);\n        });\n\n        // Caption language change\n        on.call(this.player, this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({\n                language: this.player.language,\n            });\n        });\n\n        // Captions toggle\n        on.call(this.player, this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({\n                captions: this.player.captions.active,\n            });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        on.call(this.player, this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let {detail = {}} = event;\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            triggerEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Run default and custom handlers\n        const proxy = (event, defaultHandler, customHandlerKey) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = is.function(customHandler);\n            let returned = true;\n\n            // Execute custom handler\n            if (hasCustomHandler) {\n                returned = customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (returned && is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Trigger custom and default handlers\n        const bind = (element, type, defaultHandler, customHandlerKey, passive = true) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = is.function(customHandler);\n\n            on.call(this.player, element, type, event => proxy(event, defaultHandler, customHandlerKey), passive && !hasCustomHandler);\n        };\n\n        // Play/pause toggle\n        Array.from(this.player.elements.buttons.play).forEach(button => {\n            bind(button, 'click', this.player.togglePlay, 'play');\n        });\n\n        // Pause\n        bind(this.player.elements.buttons.restart, 'click', this.player.restart, 'restart');\n\n        // Rewind\n        bind(this.player.elements.buttons.rewind, 'click', this.player.rewind, 'rewind');\n\n        // Rewind\n        bind(this.player.elements.buttons.fastForward, 'click', this.player.forward, 'fastForward');\n\n        // Mute toggle\n        bind(\n            this.player.elements.buttons.mute,\n            'click',\n            () => {\n                this.player.muted = !this.player.muted;\n            },\n            'mute',\n        );\n\n        // Captions toggle\n        bind(this.player.elements.buttons.captions, 'click', this.player.toggleCaptions);\n\n        // Fullscreen toggle\n        bind(\n            this.player.elements.buttons.fullscreen,\n            'click',\n            () => {\n                this.player.fullscreen.toggle();\n            },\n            'fullscreen',\n        );\n\n        // Picture-in-Picture\n        bind(\n            this.player.elements.buttons.pip,\n            'click',\n            () => {\n                this.player.pip = 'toggle';\n            },\n            'pip',\n        );\n\n        // Airplay\n        bind(this.player.elements.buttons.airplay, 'click', this.player.airplay, 'airplay');\n\n        // Settings menu\n        bind(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        bind(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Go back to home tab on click\n            const showHomeTab = () => {\n                const id = `plyr-settings-${this.player.id}-home`;\n                controls.showTab.call(this.player, id);\n            };\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.currentTrack = Number(event.target.value);\n                        showHomeTab();\n                    },\n                    'language',\n                );\n            } else if (matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.quality = event.target.value;\n                        showHomeTab();\n                    },\n                    'quality',\n                );\n            } else if (matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.speed = parseFloat(event.target.value);\n                        showHomeTab();\n                    },\n                    'speed',\n                );\n            } else {\n                const tab = event.target;\n                controls.showTab.call(this.player, tab.getAttribute('aria-controls'));\n            }\n        });\n\n        // Set range input alternative \"value\", which matches the tooltip time (#954)\n        bind(this.player.elements.inputs.seek, 'mousedown mousemove', event => {\n            const clientRect = this.player.elements.progress.getBoundingClientRect();\n            const percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n            event.currentTarget.setAttribute('seek-value', percent);\n        });\n\n        // Pause while seeking\n        bind(this.player.elements.inputs.seek, 'mousedown mouseup keydown keyup touchstart touchend', event => {\n            const seek = event.currentTarget;\n\n            const code = event.keyCode ? event.keyCode : event.which;\n            const eventType = event.type;\n            if ((eventType === 'keydown' || eventType === 'keyup') && (code !== 39 && code !== 37)) {\n                return;\n            }\n            // Was playing before?\n            const play = seek.hasAttribute('play-on-seeked');\n\n            // Done seeking\n            const done = [\n                'mouseup',\n                'touchend',\n                'keyup',\n            ].includes(event.type);\n\n            // If we're done seeking and it was playing, resume playback\n            if (play && done) {\n                seek.removeAttribute('play-on-seeked');\n                this.player.play();\n            } else if (!done && this.player.playing) {\n                seek.setAttribute('play-on-seeked', '');\n                this.player.pause();\n            }\n        });\n\n        // Seek\n        bind(\n            this.player.elements.inputs.seek,\n            inputEvent,\n            event => {\n                const seek = event.currentTarget;\n\n                // If it exists, use seek-value instead of \"value\" for consistency with tooltip time (#954)\n                let seekTo = seek.getAttribute('seek-value');\n\n                if (is.empty(seekTo)) {\n                    seekTo = seek.value;\n                }\n\n                seek.removeAttribute('seek-value');\n\n                this.player.currentTime = seekTo / seek.max * this.player.duration;\n            },\n            'seek',\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !is.element(this.player.elements.display.duration)) {\n            bind(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n\n                controls.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        bind(\n            this.player.elements.inputs.volume,\n            inputEvent,\n            event => {\n                this.player.volume = event.target.value;\n            },\n            'volume',\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            Array.from(getElements.call(this.player, 'input[type=\"range\"]')).forEach(element => {\n                bind(element, 'input', event => controls.updateRangeFill.call(this.player, event.target));\n            });\n        }\n\n        // Seek tooltip\n        bind(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Update controls.hover state (used for ui.toggleControls to avoid hiding when interacting)\n        bind(this.player.elements.controls, 'mouseenter mouseleave', event => {\n            this.player.elements.controls.hover = !this.player.touch && event.type === 'mouseenter';\n        });\n\n        // Update controls.pressed state (used for ui.toggleControls to avoid hiding when interacting)\n        bind(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n            this.player.elements.controls.pressed = [\n                'mousedown',\n                'touchstart',\n            ].includes(event.type);\n        });\n\n        // Focus in/out on controls\n        bind(this.player.elements.controls, 'focusin focusout', event => {\n            const { config, elements, timers } = this.player;\n\n            // Skip transition to prevent focus from scrolling the parent element\n            toggleClass(elements.controls, config.classNames.noTransition, event.type === 'focusin');\n\n            // Toggle\n            ui.toggleControls.call(this.player, event.type === 'focusin');\n\n            // If focusin, hide again after delay\n            if (event.type === 'focusin') {\n                // Restore transition\n                setTimeout(() => {\n                    toggleClass(elements.controls, config.classNames.noTransition, false);\n                }, 0);\n\n                // Delay a little more for keyboard users\n                const delay = this.touch ? 3000 : 4000;\n\n                // Clear timer\n                clearTimeout(timers.controls);\n                // Hide\n                timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n            }\n        });\n\n        // Mouse wheel for volume\n        bind(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event => {\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                const inverted = event.webkitDirectionInvertedFromDevice;\n                const step = 1 / 50;\n                let direction = 0;\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    } else {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    } else {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    }\n                }\n\n                // Don't break page scrolling at max and min\n                if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                    event.preventDefault();\n                }\n            },\n            'volume',\n            false,\n        );\n    }\n}\n\nexport default Listeners;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped; //.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else if (/(^img!|\\.(png|gif|jpg|svg)$)/.test(path)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Load an external script\n// ==========================================================================\n\nimport loadjs from 'loadjs';\n\nexport default function loadScript(url) {\n    return new Promise((resolve, reject) => {\n        loadjs(url, {\n            success: resolve,\n            error: reject,\n        });\n    });\n}\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\nimport { createElement, replaceElement, toggleClass } from './../utils/elements';\nimport { triggerEvent } from './../utils/events';\nimport fetch from './../utils/fetch';\nimport is from './../utils/is';\nimport loadScript from './../utils/loadScript';\nimport { format, stripHTML } from './../utils/strings';\nimport { buildUrlParams } from './../utils/urls';\n\n// Parse Vimeo ID from URL\nfunction parseId(url) {\n    if (is.empty(url)) {\n        return null;\n    }\n\n    if (is.number(Number(url))) {\n        return url;\n    }\n\n    const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n    return url.match(regex) ? RegExp.$2 : url;\n}\n\n// Get aspect ratio for dimensions\nfunction getAspectRatio(width, height) {\n    const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n    const ratio = getRatio(width, height);\n    return `${width / ratio}:${height / ratio}`;\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        triggerEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!is.object(window.Vimeo)) {\n            loadScript(this.config.urls.vimeo.sdk)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n\n        if (this.supported.ui) {\n            const height = 240;\n            const offset = (height - padding) / (height / 50);\n\n            this.media.style.transform = `translateY(-${offset}%)`;\n        }\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            // muted: player.muted,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n            playsinline: !this.config.fullscreen.iosNative,\n        };\n        const params = buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (is.empty(source)) {\n            source = player.media.getAttribute(player.config.attributes.embed.id);\n        }\n\n        const id = parseId(source);\n\n        // Build an iframe\n        const iframe = createElement('iframe');\n        const src = format(player.config.urls.vimeo.iframe, id, params);\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = createElement('div', { class: player.config.classNames.embedContainer });\n        wrapper.appendChild(iframe);\n        player.media = replaceElement(wrapper, player.media);\n\n        // Get poster image\n        fetch(format(player.config.urls.vimeo.api, id), 'json').then(response => {\n            if (is.empty(response)) {\n                return;\n            }\n\n            // Get the URL for thumbnail\n            const url = new URL(response[0].thumbnail_large);\n\n            // Get original image\n            url.pathname = `${url.pathname.split('_')[0]}.jpg`;\n\n            // Set and show poster\n            ui.setPoster.call(player, url.href);\n        });\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe, {\n            autopause: player.config.autopause,\n            muted: player.muted,\n        });\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Disable native text track rendering\n        if (player.supported.ui) {\n            player.embed.disableTextTrack();\n        }\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            assurePlaybackState.call(player, true);\n            return player.embed.play();\n        };\n\n        player.media.pause = () => {\n            assurePlaybackState.call(player, false);\n            return player.embed.pause();\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Vimeo will automatically play on seek if the video hasn't been played before\n\n                // Get current paused state and volume etc\n                const { embed, media, paused, volume } = player;\n                const restorePause = paused && !embed.hasPlayed;\n\n                // Set seeking state and trigger event\n                media.seeking = true;\n                triggerEvent.call(player, media, 'seeking');\n\n                // If paused, mute until seek is complete\n                Promise.resolve(restorePause && embed.setVolume(0))\n                    // Seek\n                    .then(() => embed.setCurrentTime(time))\n                    // Restore paused\n                    .then(() => restorePause && embed.pause())\n                    // Restore volume\n                    .then(() => restorePause && embed.setVolume(volume))\n                    .catch(() => {\n                        // Do nothing\n                    });\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed\n                    .setPlaybackRate(input)\n                    .then(() => {\n                        speed = input;\n                        triggerEvent.call(player, player.media, 'ratechange');\n                    })\n                    .catch(error => {\n                        // Hide menu item (and menu if empty)\n                        if (error.name === 'Error') {\n                            controls.setSpeedMenu.call(player, []);\n                        }\n                    });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    triggerEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    triggerEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed\n            .getVideoUrl()\n            .then(value => {\n                currentSrc = value;\n            })\n            .catch(error => {\n                this.debug.warn(error);\n            });\n\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            triggerEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            triggerEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', ({ cues = [] }) => {\n            const strippedCues = cues.map(cue => stripHTML(cue.text));\n            captions.updateCues.call(player, strippedCues);\n        });\n\n        player.embed.on('loaded', () => {\n            // Assure state and events are updated on autoplay\n            player.embed.getPaused().then(paused => {\n                assurePlaybackState.call(player, !paused);\n                if (!paused) {\n                    triggerEvent.call(player, player.media, 'playing');\n                }\n            });\n\n            if (is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            assurePlaybackState.call(player, true);\n            triggerEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            assurePlaybackState.call(player, false);\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            triggerEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            triggerEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                triggerEvent.call(player, player.media, 'canplaythrough');\n            }\n\n            // Get duration as if we do it before load, it gives an incorrect value\n            // https://github.com/sampotts/plyr/issues/891\n            player.embed.getDuration().then(value => {\n                if (value !== player.media.duration) {\n                    player.media.duration = value;\n                    triggerEvent.call(player, player.media, 'durationchange');\n                }\n            });\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            triggerEvent.call(player, player.media, 'seeked');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            triggerEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            triggerEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport controls from './../controls';\nimport ui from './../ui';\nimport { dedupe } from './../utils/arrays';\nimport { createElement, replaceElement, toggleClass } from './../utils/elements';\nimport { triggerEvent } from './../utils/events';\nimport fetch from './../utils/fetch';\nimport is from './../utils/is';\nimport loadImage from './../utils/loadImage';\nimport loadScript from './../utils/loadScript';\nimport { format, generateId } from './../utils/strings';\n\n// Parse YouTube ID from URL\nfunction parseId(url) {\n    if (is.empty(url)) {\n        return null;\n    }\n\n    const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    return url.match(regex) ? RegExp.$2 : url;\n}\n\n// Standardise YouTube quality unit\nfunction mapQualityUnit(input) {\n    const qualities = {\n        hd2160: 2160,\n        hd1440: 1440,\n        hd1080: 1080,\n        hd720: 720,\n        large: 480,\n        medium: 360,\n        small: 240,\n        tiny: 144,\n    };\n\n    const entry = Object.entries(qualities).find(entry => entry.includes(input));\n\n    if (entry) {\n        // Get the match corresponding to the input\n        return entry.find(value => value !== input);\n    }\n\n    return 'default';\n}\n\nfunction mapQualityUnits(levels) {\n    if (is.empty(levels)) {\n        return levels;\n    }\n\n    return dedupe(levels.map(level => mapQualityUnit(level)));\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        triggerEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (is.object(window.YT) && is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            loadScript(this.config.urls.youtube.sdk).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (is.string(key) && !is.empty(key)) {\n            const url = format(this.config.urls.youtube.api, videoId, key);\n\n            fetch(url)\n                .then(result => {\n                    if (is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = parseId(source);\n        const id = generateId(player.provider);\n        const container = createElement('div', { id });\n        player.media = replaceElement(container, player.media);\n\n        // Set poster image\n        const posterSrc = format => `https://img.youtube.com/vi/${videoId}/${format}default.jpg`;\n\n        // Check thumbnail images in order of quality, but reject fallback thumbnails (120px wide)\n        loadImage(posterSrc('maxres'), 121) // Higest quality and unpadded\n            .catch(() => loadImage(posterSrc('sd'), 121)) // 480p padded 4:3\n            .catch(() => loadImage(posterSrc('hq'))) // 360p padded 4:3. Always exists\n            .then(image => ui.setPoster.call(player, image.src))\n            .then(posterSrc => {\n                // If the image is padded, use background-size \"cover\" instead (like youtube does too with their posters)\n                if (!posterSrc.includes('maxres')) {\n                    player.elements.poster.style.backgroundSize = 'cover';\n                }\n            });\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    triggerEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange() {\n                    triggerEvent.call(player, player.media, 'qualitychange', false, {\n                        quality: player.media.quality,\n                    });\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    triggerEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        assurePlaybackState.call(player, true);\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        assurePlaybackState.call(player, false);\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // If paused, mute audio preventively (YouTube starts playing on seek if the video hasn't been played yet).\n                            if (player.paused) {\n                                player.embed.mute();\n                            }\n\n                            // Set seeking state and trigger event\n                            player.media.seeking = true;\n                            triggerEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return mapQualityUnit(instance.getPlaybackQuality());\n                        },\n                        set(input) {\n                            instance.setPlaybackQuality(mapQualityUnit(input));\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            triggerEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            triggerEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    triggerEvent.call(player, player.media, 'timeupdate');\n                    triggerEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            triggerEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            triggerEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    const seeked = player.media.seeking && [\n                        1,\n                        2,\n                    ].includes(event.data);\n\n                    if (seeked) {\n                        // Unset seeking and fire seeked event\n                        player.media.seeking = false;\n                        triggerEvent.call(player, player.media, 'seeked');\n                    }\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            triggerEvent.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            triggerEvent.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            assurePlaybackState.call(player, false);\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                triggerEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // Restore paused state (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (player.media.paused && !player.embed.hasPlayed) {\n                                player.media.pause();\n                            } else {\n                                assurePlaybackState.call(player, true);\n\n                                triggerEvent.call(player, player.media, 'playing');\n\n                                // Poll to get playback progress\n                                player.timers.playing = setInterval(() => {\n                                    triggerEvent.call(player, player.media, 'timeupdate');\n                                }, 50);\n\n                                // Check duration again due to YouTube bug\n                                // https://github.com/sampotts/plyr/issues/374\n                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                                if (player.media.duration !== instance.getDuration()) {\n                                    player.media.duration = instance.getDuration();\n                                    triggerEvent.call(player, player.media, 'durationchange');\n                                }\n\n                                // Get quality\n                                controls.setQualityMenu.call(player, mapQualityUnits(instance.getAvailableQualityLevels()));\n                            }\n\n                            break;\n\n                        case 2:\n                            // Restore audio (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (!player.muted) {\n                                player.embed.unMute();\n                            }\n                            assurePlaybackState.call(player, false);\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    triggerEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport html5 from './html5';\nimport vimeo from './plugins/vimeo';\nimport youtube from './plugins/youtube';\nimport { createElement, toggleClass, wrap } from './utils/elements';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            wrap(this.media, this.elements.wrapper);\n\n            // Faux poster container\n            this.elements.poster = createElement('div', {\n                class: this.config.classNames.poster,\n            });\n\n            this.elements.wrapper.appendChild(this.elements.poster);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            html5.extend.call(this);\n        }\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport i18n from '../i18n';\nimport { createElement } from './../utils/elements';\nimport { triggerEvent } from './../utils/events';\nimport is from './../utils/is';\nimport loadScript from './../utils/loadScript';\nimport { formatTime } from './../utils/time';\nimport { buildUrlParams } from './../utils/urls';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    get enabled() {\n        return this.player.isVideo && this.player.config.ads.enabled && !is.empty(this.publisherId);\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!is.object(window.google) || !is.object(window.google.ima)) {\n                loadScript(this.player.config.urls.googleIMA.sdk)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            // Mute based on current state\n            request.setAdWillPlayMuted(!this.player.muted);\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${i18n.get('advertisement', this.player.config)} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        if (!is.empty(this.cuePoints)) {\n            this.cuePoints.forEach(cuePoint => {\n                if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                    const seekElement = this.player.elements.progress;\n\n                    if (is.element(seekElement)) {\n                        const cuePercentage = 100 / this.player.duration * cuePoint;\n                        const cue = createElement('span', {\n                            class: this.player.config.classNames.cues,\n                        });\n\n                        cue.style.left = `${cuePercentage.toString()}%`;\n                        seekElement.appendChild(cue);\n                    }\n                }\n            });\n        }\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.player.debug.warn(this.manager.getAdSkippableState());\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            triggerEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            if (is.empty(this.cuePoints)) {\n                return;\n            }\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            if (this.manager) {\n                this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n            }\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './config/types';\nimport html5 from './html5';\nimport media from './media';\nimport support from './support';\nimport ui from './ui';\nimport { createElement, insertElement, removeElement } from './utils/elements';\nimport is from './utils/is';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (is.string(attributes)) {\n            insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (is.array(attributes)) {\n            attributes.forEach(attribute => {\n                insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        html5.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // Reset quality options\n                this.options.quality = [];\n\n                // Remove elements\n                removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if (!is.empty(input.poster)) {\n                        this.poster = input.poster;\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.playsinline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.3.12\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport captions from './captions';\nimport defaults from './config/defaults';\nimport { getProviderByUrl, providers, types } from './config/types';\nimport Console from './console';\nimport controls from './controls';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport media from './media';\nimport Ads from './plugins/ads';\nimport source from './source';\nimport Storage from './storage';\nimport support from './support';\nimport ui from './ui';\nimport { closest } from './utils/arrays';\nimport { createElement, hasClass, removeElement, replaceElement, toggleClass, toggleState, wrap } from './utils/elements';\nimport { off, on, once, triggerEvent, unbindListeners } from './utils/events';\nimport is from './utils/is';\nimport loadSprite from './utils/loadSprite';\nimport { cloneDeep, extend } from './utils/objects';\nimport { parseUrl } from './utils/urls';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Touch device\n        this.touch = support.touch;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || is.nodeList(this.media) || is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = extend(\n            {},\n            defaults,\n            Plyr.defaults,\n            options || {},\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: -1,\n            meta: new WeakMap(),\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (is.nullOrUndefined(this.media) || !is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        const clone = this.media.cloneNode(true);\n        clone.autoplay = false;\n        this.elements.original = clone;\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (is.element(iframe)) {\n                    // Detect provider\n                    url = parseUrl(iframe.getAttribute('src'));\n                    this.provider = getProviderByUrl(url.toString());\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    if (url.searchParams.length) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(url.searchParams.get('autoplay'))) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(url.searchParams.get('loop'))) {\n                            this.config.loop.active = true;\n                        }\n\n                        // TODO: replace fullscreen.iosNative with this playsinline config option\n                        // YouTube requires the playsinline in the URL\n                        if (this.isYouTube) {\n                            this.config.playsinline = truthy.includes(url.searchParams.get('playsinline'));\n                        } else {\n                            this.config.playsinline = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.playsinline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        this.eventListeners = [];\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!is.element(this.elements.container)) {\n            this.elements.container = createElement('div');\n            wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            on.call(this, this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n\n        // Autoplay if required\n        if (this.config.autoplay) {\n            this.play();\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play(promiseError = false) {\n        if (!is.function(this.media.play)) {\n            return null;\n        }\n        const mediaPlay = this.media.play;\n        if (promiseError) {\n            return mediaPlay;\n        }\n        // Return the promise (for HTML5)\n        return mediaPlay.call(this.media)\n            .then(args => args)\n            .catch(err => {\n                utils.dispatchEvent.call(this, this.elements.container, 'error', true, err);\n            });\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get stopped state\n     */\n    get stopped() {\n        return Boolean(this.paused && this.currentTime === 0);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.pause();\n            this.restart();\n        } else if (is.function(this.media.stop)) {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        // Bail if media duration isn't available yet\n        if (!this.duration) {\n            return;\n        }\n\n        // Validate input\n        const inputIsValid = is.number(input) && input > 0;\n\n        // Set\n        this.media.currentTime = inputIsValid ? Math.min(input, this.duration) : 0;\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseFloat(this.config.duration);\n\n        // Media duration can be NaN before the media has loaded\n        const duration = (this.media || {}).duration || 0;\n\n        // If config duration is funky, use regular duration\n        return fauxDuration || duration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume manually, reset muted state\n        if (!is.empty(value) && this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (is.number(input)) {\n            speed = input;\n        }\n\n        if (!is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 4.0) {\n            speed = 4.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently HTML5 & YouTube only\n     * @param {number} input - Quality level\n     */\n    set quality(input) {\n        const config = this.config.quality;\n        const options = this.options.quality;\n\n        if (!options.length) {\n            return;\n        }\n\n        let quality = ([\n            !is.empty(input) && Number(input),\n            this.storage.get('quality'),\n            config.selected,\n            config.default,\n        ]).find(is.number);\n\n        if (!options.includes(quality)) {\n            const value = closest(options, quality);\n            this.debug.warn(`Unsupported quality option: ${quality}, using ${value} instead`);\n            quality = value;\n        }\n\n        // Trigger request event\n        triggerEvent.call(this, this.media, 'qualityrequested', false, { quality });\n\n        // Update config\n        config.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isVideo) {\n            this.debug.warn('Poster can only be set for video');\n            return;\n        }\n\n        ui.setPoster.call(this, input);\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const active = is.boolean(input) ? input : !this.elements.container.classList.contains(this.config.classNames.captions.active);\n\n        // Toggle state\n        toggleState(this.elements.buttons.captions, active);\n\n        // Add class hook\n        toggleClass(this.elements.container, this.config.classNames.captions.active, active);\n\n        // Update state and trigger event\n        if (active !== this.captions.active) {\n            this.captions.active = active;\n            triggerEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n        }\n    }\n\n    /**\n     * Set the caption track by index\n     * @param {number} - Caption index\n     */\n    set currentTrack(input) {\n        captions.set.call(this, input);\n    }\n\n    /**\n     * Get the current caption track index (-1 if disabled)\n     */\n    get currentTrack() {\n        const { active, currentTrack } = this.captions;\n        return active ? currentTrack : -1;\n    }\n\n    /**\n     * Set the wanted language for captions\n     * Since tracks can be added later it won't update the actual caption track until there is a matching track\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        captions.setLanguage.call(this, input);\n    }\n\n    /**\n     * Get the current track's language\n     */\n    get language() {\n        return (captions.getCurrentTrack.call(this) || {}).language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} [toggle] - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // Don't toggle if missing UI support or if it's audio\n        if (this.supported.ui && !this.isAudio) {\n            // Get state before change\n            const isHidden = hasClass(this.elements.container, this.config.classNames.hideControls);\n\n            // Negate the argument if not undefined since adding the class to hides the controls\n            const force = typeof toggle === 'undefined' ? undefined : !toggle;\n\n            // Apply and get updated state\n            const hiding = toggleClass(this.elements.container, this.config.classNames.hideControls, force);\n\n            // Close menu\n            if (hiding && this.config.controls.includes('settings') && !is.empty(this.config.settings)) {\n                controls.toggleMenu.call(this, false);\n            }\n            // Trigger event on change\n            if (hiding !== isHidden) {\n                const eventName = hiding ? 'controlshidden' : 'controlsshown';\n                triggerEvent.call(this, this.media, eventName);\n            }\n            return !hiding;\n        }\n        return false;\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        on.call(this, this.elements.container, event, callback);\n    }\n    /**\n     * Add event listeners once\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    once(event, callback) {\n        once.call(this, this.elements.container, event, callback);\n    }\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        if (this.elements) {\n            off(this.elements.container, event, callback);\n        }\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    removeElement(this.elements.buttons.play);\n                    removeElement(this.elements.captions);\n                    removeElement(this.elements.controls);\n                    removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                unbindListeners.call(this);\n\n                // Replace the container with the original element provided\n                replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                triggerEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 300);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n        // cleanup eventListener\n        utils.cleanCallback();\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return loadSprite(url, id);\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {*} selector\n     * @param {object} options\n     */\n    static setup(selector, options = {}) {\n        let targets = null;\n\n        if (is.string(selector)) {\n            targets = Array.from(document.querySelectorAll(selector));\n        } else if (is.nodeList(selector)) {\n            targets = Array.from(selector);\n        } else if (is.array(selector)) {\n            targets = selector.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        return targets.map(t => new Plyr(t, options));\n    }\n}\n\nPlyr.defaults = cloneDeep(defaults);\n\nexport default Plyr;\n"]}