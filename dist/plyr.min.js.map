{"version":3,"sources":["support.js","../../node_modules/loadjs/dist/loadjs.umd.js","storage.js","types.js","utils.js","html5.js","i18n.js","controls.js","captions.js","console.js","defaults.js","fullscreen.js","ui.js","listeners.js","plugins/vimeo.js","plugins/youtube.js","media.js","plugins/ads.js","source.js","plyr.js"],"names":["range","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","length","splice","executeCallbacks","args","depsNotFound","call","success","error","loadFile","path","callbackFn","numTries","isCss","e","doc","document","async","maxTries","numRetries","beforeCallbackFn","before","pathStripped","replace","test","createElement","rel","href","src","undefined","onload","onerror","onbeforeload","ev","result","type","sheet","cssText","x","defaultPrevented","head","appendChild","loadjs","paths","arg1","arg2","trim","fn","i","numWaiting","push","loadFiles","ready","deps","bundleIds","r","subscribe","done","reset","isDefined","module","exports","Storage","player","enabled","config","storage","key","supported","this","store","window","localStorage","getItem","utils","is","empty","json","JSON","parse","string","object","get","extend","setItem","stringify","removeItem","providers","types","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","instanceof","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","kind","array","nodeList","keys","constructor","documentMode","documentElement","style","navigator","userAgent","platform","url","responseType","arguments","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","responseText","response","Error","statusText","open","send","minWidth","image","Image","handler","naturalWidth","assign","id","hasId","exists","getElementById","update","container","data","innerHTML","body","insertAdjacentElement","useStorage","toggleHidden","setAttribute","cached","prefix","content","fetch","then","catch","Math","floor","random","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","parentNode","sibling","nextSibling","insertBefore","attributes","text","setAttributes","innerText","target","removeElement","removeChild","childNodes","lastChild","newChild","oldChild","replaceChild","entries","_ref","_ref2","value","sel","existingAttributes","existing","split","s","selector","className","parts","charAt","class","hidden","hide","boolean","hasAttribute","removeAttribute","force","method","classList","contains","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","querySelectorAll","includes","querySelector","focused","activeElement","toggle","focusable","getElements","first","last","trap","event","keyCode","getFocusElement","shiftKey","focus","preventDefault","on","off","callback","passive","capture","once","function","Node","toggleListener","events","options","support","passiveListeners","eventListeners","item","removeEventListener","eventListenerList","onceCallback","_len","_key","apply","bubbles","detail","CustomEvent","dispatchEvent","toggleState","pressed","getAttribute","state","_len2","_key2","toString","match","current","max","toFixed","parseInt","time","displayHours","inverted","number","formatTime","format","slice","hours","getHours","mins","getMinutes","secs","getSeconds","find","RegExp","toUpperCase","substr","toLowerCase","replaceAll","toTitleCase","toPascalCase","sources","_len3","_key3","source","shift","defineProperty","concat","toConsumableArray","filter","indexOf","reduce","obj","prev","curr","abs","youtube","vimeo","$2","parser","search","startsWith","parseUrl","params","hash","_hash$split2","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","width","height","ratio","getRatio","w","h","offsetHeight","provider","playsinline","api","ui","browser","getBrowser","canPlayInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","transitionEndEvent","matchMedia","html5","mime","_this","getSources","currentTime","playing","load","play","blankVideo","debug","log","i18n","getDeep","seekTime","title","controls","cors","URL","iconUrl","location","host","isIE","svg4everybody","getElement","selectors","buttons","pause","restart","rewind","fastForward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","seekTooltip","classNames","tooltip","warn","toggleNativeControls","getIconUrl","iconPath","iconPrefix","icon","createElementNS","use","setAttributeNS","attr","badge","menu","buttonType","button","toCamelCase","label","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","updateRangeFill","suffix","list","_ref$badge","checked","_ref$checked","radio","faux","insertAdjacentHTML","forceHours","setRange","muted","getPercentage","getElementsByTagName","nodeValue","buffered","isWebkit","setProperty","tooltips","percent","clientRect","getBoundingClientRect","visible","_toggle","toggleClass","_this2","touch","pageX","left","hasClass","parseFloat","updateTimeDisplay","invert","invertTime","seeking","updateProgress","hasDuration","displayDuration","paused","updateSeekTooltip","setting","tabs","panes","quality","dedupe","_this3","toggleTab","checkMenu","emptyElement","sort","a","b","sorting","createMenuItem","getLabel","createBadge","getBadge","updateSetting","pane","currentTrack","default","tracks","getTracks","track","_this4","active","language","unshift","bind","speed","isVimeo","_this5","values","some","tab","form","show","isMenuItem","isButton","stopPropagation","clone","position","opacity","name","scrollWidth","scrollHeight","transitions","reducedMotion","size","getTabSize","propertyName","createButton","createRange","createProgress","createTime","inner","home","_this6","back","setQualityMenu","getQualityOptions","setSpeedMenu","loadSprite","props","create","_ref3","findElements","repaint","labels","_this7","isYouTube","textTracks","setCaptionsMenu","insertAfter","hostname","protocol","blob","createObjectURL","userLanguage","setLanguage","trackEvents","_captions","meta","set","mode","updateCues","trackRemoved","currentTrackNode","firstMatch","getCurrentTrack","embed","enableTextTrack","toggleCaptions","has","fromLanguage","sortIsDefault","sorted","cues","activeCues","cue","getCueAsHTML","getHTML","cueText","caption","noop","Console","console","defaults","onChange","isIos","trapFocus","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","y","overflow","fallback","Fullscreen","property","native","iosNative","webkitEnterFullscreen","requestFullscreen","webkitExitFullscreen","action","cancelFullScreen","exitFullscreen","exit","enter","fullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","pre","uiSupported","listeners","inject","setup","loop","updateVolume","timeUpdate","checkPlaying","isTouch","setTitle","poster","backgroundImage","setPoster","durationUpdate","isEmbed","iframe","enable","posterEnabled","loadPromise","loadImage","togglePoster","stopped","toggleControls","loading","timers","setTimeout","hideControls","hover","Listeners","lastKey","handleKey","toggleMenu","firstTouch","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","keyboard","global","tabFocus","delay","hasAudio","resetOnEnd","checkLoading","ads","initialized","managerPromise","clickToPlay","ended","disableContextMenu","_event$detail","inputEvent","proxy","defaultHandler","customHandlerKey","customHandler","returned","hasCustomHandler","showHomeTab","showTab","currentTarget","eventType","seekTo","toggleInvert","_player","noTransition","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","assurePlaybackState","hasPlayed","setAspectRatio","Vimeo","loadScript","urls","sdk","padding","paddingBottom","offset","transform","autoplay","buildUrlParams","parseVimeoId","embedContainer","replaceElement","thumbnail_large","pathname","Player","autopause","disableTextTrack","stop","restorePause","setVolume","setCurrentTime","selected","setPlaybackRate","setLoop","currentSrc","getVideoUrl","all","getVideoWidth","getVideoHeight","dimensions","getAspectRatio","setAutopause","getVideoTitle","getCurrentTime","getDuration","getTextTracks","strippedCues","_ref$cues","stripHTML","getPaused","seconds","build","mapQualityUnit","entry","YT","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","google","items","snippet","currentId","parseYouTubeId","generateId","posterSrc","backgroundSize","message","instance","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stopVideo","getPlaybackQuality","setPlaybackQuality","getAvailablePlaybackRates","buffering","setInterval","getVideoLoadedFraction","lastBuffered","levels","getAvailableQualityLevels","level","unMute","wrap","Ads","publisherId","manager","loader","cuePoints","safetyTimer","countdownTimer","ima","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setAdWillPlayMuted","getRemainingTime","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","seekElement","cuePercentage","AdEvent","onAdEvent","ad","getAd","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","_this11","Date","now","base","insertElement","attribute","cancelRequests","check","crossorigin","addStyleHook","insertElements","Plyr","failed","jQuery","plyr","original","tagName","getProviderByUrl","getUrlParams","truthy","step","webkitShowPlaybackTargetPicker","isHidden","hiding","eventName","soft","cleanupEventListeners","unload","inputIsValid","min","end","fauxDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","closest","change","states","webkitPresentationMode","inline","t","cloneDeep"],"mappings":"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CJ,8BACF,oBACA,iBACH,eACC,iBACC,eACH,aACC,YACF,UACA,YACE,iBACG,mBACD,wBACM,wBAEL,UACA,UACA,SACD,SACA,SACA,wBAOA,gDACG,6CACH,wDAGA,yCACA,wHAGA,uEAMH,UACA,WACC,aACE,YACD,iBACK,UACP,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,+BAIA,kBACA,mBACA,YACA,cACA,cACA,iBACA,gBACA,gCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,mCACK,kCACP,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,+BACF,+BACE,mCAEF,2BACA,0BACD,+BAEI,mDAMP,qBACI,kBACH,4BACA,mCACS,sCACR,6BACO,2BACV,oBACI,wBACA,uBACD,uBACC,wBACA,sBACF,sBACE,qBACH,oBACE,6BACM,4BACP,uBACE,6BACI,6BACC,kCAEH,0BACA,mBACD,qCAGG,gCACD,6CAGC,oCACC,4CAGC,6BACH,uCAGG,iCACH,iCAEF,+CAMI,wBACN,oCAMA,oBAMC,cACI,KC1YfvO,EAAUvQ,EAAMwQ,aAEtB,SAASuO,OACApf,KAAKL,aAKJ4V,EAASvV,KAAKN,OAAOoG,SAASuN,QAAQU,WACxC1T,EAAMC,GAAG8F,QAAQmP,MACXxJ,YAAYwJ,EAAQvV,KAAKia,UAI7BnO,cAAc7P,KAAK+D,KAAKN,OAAQM,KAAKiH,OAAQjH,KAAKia,OAAS,kBAAoB,kBAAkB,GAGlGrJ,EAAQyO,SACHC,UAAUrjB,KAAK+D,KAAKN,OAAQM,KAAKiH,OAAQjH,KAAKia,SAI5D,SAASsF,QAAe7V,EAAgBrG,UAAAzH,OAAA,QAAA4B,IAAA6F,UAAA,IAAAA,UAAA,GAE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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, playsinline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const canPlayInline = browser.isIPhone && playsinline && support.playsinline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    playsinline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Check directly if codecs specified\n            if (type.includes('codecs=')) {\n                return media.canPlayType(type).replace(/no/, '');\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped; //.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else if (/(^img!|\\.(png|gif|jpg|svg)$)/.test(path)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported || !this.enabled) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport loadjs from 'loadjs';\nimport Storage from './storage';\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // cache event lisenter\n    eventListeners:[],\n    // Check variable types\n    is: {\n        object(input) {\n            return utils.getConstructor(input) === Object;\n        },\n        number(input) {\n            return utils.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return utils.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return utils.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return utils.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !utils.is.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return utils.is.instanceof(input, WeakMap);\n        },\n        nodeList(input) {\n            return utils.is.instanceof(input, NodeList);\n        },\n        element(input) {\n            return utils.is.instanceof(input, Element);\n        },\n        textNode(input) {\n            return utils.getConstructor(input) === Text;\n        },\n        event(input) {\n            return utils.is.instanceof(input, Event);\n        },\n        cue(input) {\n            return utils.is.instanceof(input, window.TextTrackCue) || utils.is.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return utils.is.instanceof(input, TextTrack) || (!utils.is.nullOrUndefined(input) && utils.is.string(input.kind));\n        },\n        url(input) {\n            return !utils.is.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                utils.is.nullOrUndefined(input) ||\n                ((utils.is.string(input) || utils.is.array(input) || utils.is.nodeList(input)) && !input.length) ||\n                (utils.is.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n    },\n\n    getConstructor(input) {\n        return !utils.is.nullOrUndefined(input) ? input.constructor : null;\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Fetch wrapper\n    // Using XHR to avoid issues with older browsers\n    fetch(url, responseType = 'text') {\n        return new Promise((resolve, reject) => {\n            try {\n                const request = new XMLHttpRequest();\n\n                // Check for CORS support\n                if (!('withCredentials' in request)) {\n                    return;\n                }\n\n                request.addEventListener('load', () => {\n                    if (responseType === 'text') {\n                        try {\n                            resolve(JSON.parse(request.responseText));\n                        } catch (e) {\n                            resolve(request.responseText);\n                        }\n                    } else {\n                        resolve(request.response);\n                    }\n                });\n\n                request.addEventListener('error', () => {\n                    throw new Error(request.statusText);\n                });\n\n                request.open('GET', url, true);\n\n                // Set the required response type\n                request.responseType = responseType;\n\n                request.send();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    },\n\n    // Load image avoiding xhr/fetch CORS issues\n    // Server status can't be obtained this way unfortunately, so this uses \"naturalWidth\" to determine if the image has loaded.\n    // By default it checks if it is at least 1px, but you can add a second argument to change this.\n    loadImage(src, minWidth = 1) {\n        return new Promise((resolve, reject) => {\n            const image = new Image();\n            const handler = () => {\n                delete image.onload;\n                delete image.onerror;\n                (image.naturalWidth >= minWidth ? resolve : reject)(image);\n            };\n            Object.assign(image, {onload: handler, onerror: handler, src});\n        });\n    },\n\n    // Load an external script\n    loadScript(url) {\n        return new Promise((resolve, reject) => {\n            loadjs(url, {\n                success: resolve,\n                error: reject,\n            });\n        });\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        const exists = () => document.getElementById(id) !== null;\n\n        const update = (container, data) => {\n            container.innerHTML = data;\n\n            // Check again incase of race condition\n            if (hasId && exists()) {\n                return;\n            }\n\n            // Inject the SVG to the body\n            document.body.insertAdjacentElement('afterbegin', container);\n        };\n\n        // Only load once if ID set\n        if (!hasId || !exists()) {\n            const useStorage = Storage.supported;\n\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (useStorage) {\n                const cached = window.localStorage.getItem(`${prefix}-${id}`);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    update(container, data.content);\n                }\n            }\n\n            // Get the sprite\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.empty(result)) {\n                        return;\n                    }\n\n                    if (useStorage) {\n                        window.localStorage.setItem(\n                            `${prefix}-${id}`,\n                            JSON.stringify({\n                                content: result,\n                            }),\n                        );\n                    }\n\n                    update(container, result);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.innerText = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove element(s)\n    removeElement(element) {\n        if (utils.is.nodeList(element) || utils.is.array(element)) {\n            Array.from(element).forEach(utils.removeElement);\n            return;\n        }\n\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return;\n        }\n\n        element.parentNode.removeChild(element);\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.entries(attributes).forEach(([\n            key,\n            value,\n        ]) => {\n            element.setAttribute(key, value);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle hidden\n    toggleHidden(element, hidden) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        let hide = hidden;\n\n        if (!utils.is.boolean(hide)) {\n            hide = !element.hasAttribute('hidden');\n        }\n\n        if (hide) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Mirror Element.classList.toggle, with IE compatibility for \"force\" argument\n    toggleClass(element, className, force) {\n        if (utils.is.element(element)) {\n            let method = 'toggle';\n            if (typeof force !== 'undefined') {\n                method = force ? 'add' : 'remove';\n            }\n\n            element.classList[method](className);\n            return element.classList.contains(className);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus(element = null, toggle = false) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        const trap = event => {\n            // Bail if not tab key or not fullscreen\n            if (event.key !== 'Tab' || event.keyCode !== 9) {\n                return;\n            }\n\n            // Get the current focused element\n            const focused = utils.getFocusElement();\n\n            if (focused === last && !event.shiftKey) {\n                // Move focus to first element that can be tabbed if Shift isn't used\n                first.focus();\n                event.preventDefault();\n            } else if (focused === first && event.shiftKey) {\n                // Move focus to last element that can be tabbed if Shift is used\n                last.focus();\n                event.preventDefault();\n            }\n        };\n\n        if (toggle) {\n            utils.on(this.elements.container, 'keydown', trap, false);\n        } else {\n            utils.off(this.elements.container, 'keydown', trap, false);\n        }\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle = false, passive = true, capture = false, once = false) {\n        // Bail if no elemetns, event, or callback\n        if (utils.is.empty(elements) || utils.is.empty(event) || !utils.is.function(callback)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements) || utils.is.array(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just the capture boolean for browsers with no passive listener support\n        let options = capture;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive,\n                // Whether the listener is a capturing listener or not\n                capture,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            if (toggle && !once) {\n                // cache event listener\n                utils.eventListeners.push({ elements, type, callback, options });\n            }\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n    // remove all cached event listeners\n    cleanupEventListeners() {\n        utils.eventListeners.forEach(item => {\n            const { elements, type, callback, options } = item;\n            elements.removeEventListener(type, callback, options);\n        });\n        utils.eventListenerList = [];\n    },\n    // Bind event handler\n    on(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Bind event handler once\n    once(element, events = '', callback, passive = true, capture = false) {\n        function onceCallback(...args) {\n            utils.off(element, events, onceCallback, passive, capture);\n            callback.apply(this, args);\n        }\n        utils.toggleListener(element, events, onceCallback, true, passive, capture, true);\n    },\n\n    // Unbind event handler\n    off(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type = '', bubbles = false, detail = {}) {\n        // Bail if no element\n        if (!utils.is.element(element) || utils.is.empty(type)) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles,\n            detail: Object.assign({}, detail, {\n                plyr: this,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // If multiple elements passed\n        if (utils.is.array(element) || utils.is.nodeList(element)) {\n            Array.from(element).forEach(target => utils.toggleState(target, input));\n            return;\n        }\n\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Format string\n    format(input, ...args) {\n        if (utils.is.empty(input)) {\n            return input;\n        }\n\n        return input.toString().replace(/{(\\d+)}/g, (match, i) => (utils.is.string(args[i]) ? args[i] : ''));\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Time helpers\n    getHours(value) {\n        return parseInt((value / 60 / 60) % 60, 10);\n    },\n    getMinutes(value) {\n        return parseInt((value / 60) % 60, 10);\n    },\n    getSeconds(value) {\n        return parseInt(value % 60, 10);\n    },\n\n    // Format time to UI friendly string\n    formatTime(time = 0, displayHours = false, inverted = false) {\n        // Bail if the value isn't a number\n        if (!utils.is.number(time)) {\n            return utils.formatTime(null, displayHours, inverted);\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Breakdown to hours, mins, secs\n        let hours = utils.getHours(time);\n        const mins = utils.getMinutes(time);\n        const secs = utils.getSeconds(time);\n\n        // Do we need to display hours?\n        if (displayHours || hours > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Replace all occurances of a string in a string\n    replaceAll(input = '', find = '', replace = '') {\n        return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n    },\n\n    // Convert to title case\n    toTitleCase(input = '') {\n        return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n    },\n\n    // Convert string to pascalCase\n    toPascalCase(input = '') {\n        let string = input.toString();\n\n        // Convert kebab case\n        string = utils.replaceAll(string, '-', ' ');\n\n        // Convert snake case\n        string = utils.replaceAll(string, '_', ' ');\n\n        // Convert to title case\n        string = utils.toTitleCase(string);\n\n        // Convert to pascal case\n        return utils.replaceAll(string, ' ', '');\n    },\n\n    // Convert string to pascalCase\n    toCamelCase(input = '') {\n        let string = input.toString();\n\n        // Convert to pascal case\n        string = utils.toPascalCase(string);\n\n        // Convert first character to lowercase\n        return string.charAt(0).toLowerCase() + string.slice(1);\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Remove duplicates in an array\n    dedupe(array) {\n        if (!utils.is.array(array)) {\n            return array;\n        }\n\n        return array.filter((item, index) => array.indexOf(item) === index);\n    },\n\n    // Clone nested objects\n    cloneDeep(object) {\n        return JSON.parse(JSON.stringify(object));\n    },\n\n    // Get a nested value in an object\n    getDeep(object, path) {\n        return path.split('.').reduce((obj, key) => obj && obj[key], object);\n    },\n\n    // Get the closest value in an array\n    closest(array, value) {\n        if (!utils.is.array(array) || !array.length) {\n            return null;\n        }\n\n        return array.reduce((prev, curr) => (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev));\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = utils.parseUrl(input));\n        }\n\n        if (utils.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Like outerHTML, but also works for DocumentFragment\n    getHTML(element) {\n        const wrapper = document.createElement('div');\n        wrapper.appendChild(element);\n        return wrapper.innerHTML;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    get transitionEndEvent() {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return utils.is.string(type) ? events[type] : false;\n    },\n\n    // Force repaint of element\n    repaint(element) {\n        setTimeout(() => {\n            utils.toggleHidden(element, true);\n            element.offsetHeight; // eslint-disable-line\n            utils.toggleHidden(element, false);\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr HTML5 helpers\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\nconst html5 = {\n    getSources() {\n        if (!this.isHTML5) {\n            return [];\n        }\n\n        const sources = Array.from(this.media.querySelectorAll('source'));\n\n        // Filter out unsupported sources\n        return sources.filter(source => support.mime.call(this, source.getAttribute('type')));\n    },\n\n    // Get quality levels\n    getQualityOptions() {\n        // Get sizes from <source> elements\n        return html5.getSources.call(this)\n            .map(source => Number(source.getAttribute('size')))\n            .filter(Boolean);\n    },\n\n    extend() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        const player = this;\n\n        // Quality\n        Object.defineProperty(player.media, 'quality', {\n            get() {\n                // Get sources\n                const sources = html5.getSources.call(player);\n                const [source] = sources.filter(source => source.getAttribute('src') === player.source);\n\n                // Return size, if match is found\n                return source && Number(source.getAttribute('size'));\n            },\n            set(input) {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                // Get first match for requested size\n                const source = sources.find(source => Number(source.getAttribute('size')) === input);\n\n                // No matching source found\n                if (!source) {\n                    return;\n                }\n\n                // Get current state\n                const { currentTime, playing } = player;\n\n                // Set new source\n                player.media.src = source.getAttribute('src');\n\n                // Restore time\n                const onLoadedMetaData = () => {\n                    player.currentTime = currentTime;\n                };\n                player.once('loadedmetadata', onLoadedMetaData);\n\n                // Load new source\n                player.media.load();\n\n                // Resume playing\n                if (playing) {\n                    player.play();\n                }\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                    quality: input,\n                });\n            },\n        });\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        utils.removeElement(html5.getSources());\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default html5;\n","// ==========================================================================\n// Plyr internationalization\n// ==========================================================================\n\nimport utils from './utils';\n\nconst i18n = {\n    get(key = '', config = {}) {\n        if (utils.is.empty(key) || utils.is.empty(config)) {\n            return '';\n        }\n\n        let string = utils.getDeep(config.i18n, key);\n\n        if (utils.is.empty(string)) {\n            return '';\n        }\n\n        const replace = {\n            '{seektime}': config.seekTime,\n            '{title}': config.title,\n        };\n\n        Object.entries(replace).forEach(([\n            key,\n            value,\n        ]) => {\n            string = utils.replaceAll(string, key, value);\n        });\n\n        return string;\n    },\n};\n\nexport default i18n;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport captions from './captions';\nimport html5 from './html5';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n\n\n    // Get icon URL\n    getIconUrl() {\n        const url = new URL(this.config.iconUrl, window.location);\n        const cors = url.host !== window.location.host || (browser.isIE && !window.svg4everybody);\n\n        return {\n            url: this.config.iconUrl,\n            cors,\n        };\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: utils.getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.cors ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n                focusable: 'false',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = i18n.get(type, this.config);\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = utils.toCamelCase(buttonType);\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (buttonType) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = buttonType;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!utils.is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                id: `${attributes.id}-label`,\n                class: this.config.classNames.hidden,\n            },\n            i18n.get(type, this.config),\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                    // A11y fixes for https://github.com/sampotts/plyr/issues/905\n                    role: 'slider',\n                    'aria-labelledby': `${attributes.id}-label`,\n                    'aria-valuemin': 0,\n                    'aria-valuemax': 100,\n                    'aria-valuenow': 0,\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                    role: 'presentation',\n                    'aria-hidden': true,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = i18n.get('played', this.config);\n                    break;\n\n                case 'buffer':\n                    suffix = i18n.get('buffered', this.config);\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.innerText = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const attributes = utils.getAttributesFromSelector(this.config.selectors.display[type]);\n\n        const container = utils.createElement('div', utils.extend(attributes, {\n            class: `plyr__time ${attributes.class}`,\n            'aria-label': i18n.get(type, this.config),\n        }), '00:00');\n\n        // Reference for updates\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem({value, list, type, title, badge = null, checked = false}) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = utils.createElement('span', { hidden: '' });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const forceHours = utils.getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.innerText = utils.formatTime(time, forceHours, inverted);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        const setProgress = (target, input) => {\n            const value = utils.is.number(input) ? input : 0;\n            const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n            // Update value and label\n            if (utils.is.element(progress)) {\n                progress.value = value;\n\n                // Update text label inside\n                const label = progress.getElementsByTagName('span')[0];\n                if (utils.is.element(label)) {\n                    label.childNodes[0].nodeValue = value;\n                }\n            }\n        };\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                case 'seeked':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        controls.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    setProgress(this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set aria value for https://github.com/sampotts/plyr/issues/905\n        range.setAttribute('aria-valuenow', range.value);\n\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.progress.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        const toggle = toggle => {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, toggle);\n        };\n\n        // Hide on touch\n        if (this.touch) {\n            toggle(false);\n            return;\n        }\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            toggle(event.type === 'mouseenter');\n        }\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        controls.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        controls.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded or durationchange events\n    durationUpdate() {\n        // Bail if no ui or durationchange event triggered after playing/seek when invertTime is false\n        if (!this.supported.ui || (!this.config.invertTime && this.currentTime)) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        utils.toggleHidden(this.elements.settings.tabs[setting], !toggle);\n    },\n\n    // Set the quality menu\n    setQualityMenu(options) {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on uniqueness and config\n        if (utils.is.array(options)) {\n            this.options.quality = utils.dedupe(options)\n                .filter(quality => this.config.quality.options.includes(quality));\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.options.quality.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            const label = i18n.get(`qualityBadge.${quality}`, this.config);\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        // Sort options by the config and then render options\n        this.options.quality\n            .sort((a, b) => {\n                const sorting = this.config.quality.options;\n                return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n            })\n            .forEach(quality => {\n                controls.createMenuItem.call(this, {\n                    value: quality,\n                    list,\n                    type,\n                    title: controls.getLabel.call(this, 'quality', quality),\n                    badge: getBadge(quality),\n                });\n            });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? i18n.get('normal', this.config) : `${value}&times;`;\n\n            case 'quality':\n                if (utils.is.number(value)) {\n                    const label = i18n.get(`qualityLabel.${value}`, this.config);\n\n                    if (!label.length) {\n                        return `${value}p`;\n                    }\n\n                    return label;\n                }\n\n                return utils.toTitleCase(value);\n\n            case 'captions':\n                return captions.getLabel.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container, input) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.currentTrack;\n                break;\n\n            default:\n                value = !utils.is.empty(input) ? input : this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!utils.is.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // If there's no list it means it's not been rendered...\n        if (!utils.is.element(list)) {\n            return;\n        }\n\n        // Update the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n\n        // Find the radio option and check it\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                i18n.get(option, this.config)\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n        const tracks = captions.getTracks.call(this);\n\n        // Toggle the pane and tab\n        controls.toggleTab.call(this, type, tracks.length);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If there's no captions, bail\n        if (!tracks.length) {\n            return;\n        }\n\n        // Generate options data\n        const options = tracks.map((track, value) => ({\n            value,\n            checked: this.captions.active && this.currentTrack === value,\n            title: captions.getLabel.call(this, track),\n            badge: track.language && controls.createBadge.call(this, track.language.toUpperCase()),\n            list,\n            type: 'language',\n        }));\n\n        // Add the \"Disabled\" option to turn off captions\n        options.unshift({\n            value: -1,\n            checked: !this.captions.active,\n            title: i18n.get('disabled', this.config),\n            list,\n            type: 'language',\n        });\n\n        // Generate options\n        options.forEach(controls.createMenuItem.bind(this));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Do nothing if not selected\n        if (!this.config.controls.includes('settings') || !this.config.settings.includes('speed')) {\n            return;\n        }\n\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the speed options\n        if (utils.is.array(options)) {\n            this.options.speed = options;\n        } else if (this.isHTML5 || this.isVimeo) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed) && this.options.speed.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            controls.createMenuItem.call(this, {\n                value: speed,\n                list,\n                type,\n                title: controls.getLabel.call(this, 'speed', speed),\n            });\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Check if we need to hide/show the settings menu\n    checkMenu() {\n        const { tabs } = this.elements.settings;\n        const visible = !utils.is.empty(tabs) && Object.values(tabs).some(tab => !tab.hidden);\n\n        utils.toggleHidden(this.elements.settings.menu, !visible);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!utils.is.element(form) || !utils.is.element(button)) {\n            return;\n        }\n\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.hasAttribute('hidden');\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            utils.toggleHidden(form, !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.removeAttribute('hidden');\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(target = '') {\n        const { menu } = this.elements.settings;\n        const pane = document.getElementById(target);\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"]:not([hidden])');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.once(container, utils.transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        utils.toggleHidden(current, true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        utils.toggleHidden(pane, false);\n\n        const tabs = utils.getElements.call(this, `[aria-controls=\"${target}\"]`);\n        Array.from(tabs).forEach(tab => {\n            tab.setAttribute('aria-expanded', true);\n        });\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n                hidden: '',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                hidden: '',\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    i18n.get(type, this.config),\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    hidden: '',\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    i18n.get(type, this.config),\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.isHTML5) {\n            controls.setQualityMenu.call(this, html5.getQualityOptions.call(this));\n        }\n\n        controls.setSpeedMenu.call(this);\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.cors) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // Set template properties\n        const props = {\n            id: this.id,\n            seektime: this.config.seekTime,\n            title: this.config.title,\n        };\n        let update = true;\n\n        if (utils.is.string(this.config.controls) || utils.is.element(this.config.controls)) {\n            // String or HTMLElement passed as the option\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls.call(this, props);\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: captions.getLabel.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n            update = false;\n        }\n\n        // Replace props with their value\n        const replace = input => {\n            let result = input;\n\n            Object.entries(props).forEach(([\n                key,\n                value,\n            ]) => {\n                result = utils.replaceAll(result, `{${key}}`, value);\n            });\n\n            return result;\n        };\n\n        // Update markup\n        if (update) {\n            if (utils.is.string(this.config.controls)) {\n                container = replace(container);\n            } else if (utils.is.element(container)) {\n                container.innerHTML = replace(container.innerHTML);\n            }\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else if (container) {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!utils.is.element(this.elements.controls)) {\n            controls.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Get browser info\n        const browser = utils.getBrowser();\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const href = utils.parseUrl(src);\n\n                if (href.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(href.protocol)) {\n                    utils\n                        .fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            utils.removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        }\n\n        // Get language from storage, fallback to config\n        let language = this.storage.get('language') || this.config.captions.language;\n        if (language === 'auto') {\n            [ language ] = (navigator.language || navigator.userLanguage).split('-');\n        }\n        // Set language and show if active\n        captions.setLanguage.call(this, language, active);\n\n        // Watch changes to textTracks and update captions menu\n        if (this.isHTML5) {\n            const trackEvents = this.config.captions.update ? 'addtrack removetrack' : 'removetrack';\n            utils.on(this.media.textTracks, trackEvents, captions.update.bind(this));\n        }\n\n        // Update available languages in list next tick (the event must not be triggered before the listeners)\n        setTimeout(captions.update.bind(this), 0);\n    },\n\n    update() {\n        const tracks = captions.getTracks.call(this, true);\n        // Get the wanted language\n        const { language, meta } = this.captions;\n\n        // Handle tracks (add event listener and \"pseudo\"-default)\n        if (this.isHTML5 && this.isVideo) {\n            tracks\n                .filter(track => !meta.get(track))\n                .forEach(track => {\n                    this.debug.log('Track added', track);\n                    // Attempt to store if the original dom element was \"default\"\n                    meta.set(track, {\n                        default: track.mode === 'showing',\n                    });\n\n                    // Turn off native caption rendering to avoid double captions\n                    track.mode = 'hidden';\n\n                    // Add event listener for cue changes\n                    utils.on(track, 'cuechange', () => captions.updateCues.call(this));\n                });\n        }\n\n        const trackRemoved = !tracks.find(track => track === this.captions.currentTrackNode);\n        const firstMatch = this.language !== language && tracks.find(track => track.language === language);\n\n        // Update language if removed or first matching track added\n        if (trackRemoved || firstMatch) {\n            captions.setLanguage.call(this, language, this.config.captions.active);\n        }\n\n        // Enable or disable captions based on track length\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(tracks));\n\n        // Update available languages in list\n        if ((this.config.controls || []).includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    set(index, setLanguage = true, show = true) {\n        const tracks = captions.getTracks.call(this);\n\n        // Disable captions if setting to -1\n        if (index === -1) {\n            this.toggleCaptions(false);\n            return;\n        }\n\n        if (!utils.is.number(index)) {\n            this.debug.warn('Invalid caption argument', index);\n            return;\n        }\n\n        if (!(index in tracks)) {\n            this.debug.warn('Track not found', index);\n            return;\n        }\n\n        if (this.captions.currentTrack !== index) {\n            this.captions.currentTrack = index;\n            const track = captions.getCurrentTrack.call(this);\n            const { language } = track || {};\n\n            // Store reference to node for invalidation on remove\n            this.captions.currentTrackNode = track;\n\n            // Prevent setting language in some cases, since it can violate user's intentions\n            if (setLanguage) {\n                this.captions.language = language;\n            }\n\n            // Handle Vimeo captions\n            if (this.isVimeo) {\n                this.embed.enableTextTrack(language);\n            }\n\n            // Trigger event\n            utils.dispatchEvent.call(this, this.media, 'languagechange');\n        }\n\n        if (this.isHTML5 && this.isVideo) {\n            // If we change the active track while a cue is already displayed we need to update it\n            captions.updateCues.call(this);\n        }\n\n        // Show captions\n        if (show) {\n            this.toggleCaptions(true);\n        }\n    },\n\n    setLanguage(language, show = true) {\n        if (!utils.is.string(language)) {\n            this.debug.warn('Invalid language argument', language);\n            return;\n        }\n        // Normalize\n        this.captions.language = language.toLowerCase();\n\n        // Set currentTrack\n        const tracks = captions.getTracks.call(this);\n        const track = captions.getCurrentTrack.call(this, true);\n        captions.set.call(this, tracks.indexOf(track), false, show);\n    },\n\n    // Get current valid caption tracks\n    // If update is false it will also ignore tracks without metadata\n    // This is used to \"freeze\" the language options when captions.update is false\n    getTracks(update = false) {\n        // Handle media or textTracks missing or null\n        const tracks = Array.from((this.media || {}).textTracks || []);\n        // For HTML5, use cache instead of current tracks when it exists (if captions.update is false)\n        // Filter out removed tracks and tracks that aren't captions/subtitles (for example metadata)\n        return tracks\n            .filter(track => !this.isHTML5 || update || this.captions.meta.has(track))\n            .filter(track => [\n                'captions',\n                'subtitles',\n            ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack(fromLanguage = false) {\n        const tracks = captions.getTracks.call(this);\n        const sortIsDefault = track => Number((this.captions.meta.get(track) || {}).default);\n        const sorted = Array.from(tracks).sort((a, b) => sortIsDefault(b) - sortIsDefault(a));\n        return (!fromLanguage && tracks[this.currentTrack]) || sorted.find(track => track.language === this.captions.language) || sorted[0];\n    },\n\n    // Get UI label for track\n    getLabel(track) {\n        let currentTrack = track;\n\n        if (!utils.is.track(currentTrack) && support.textTracks && this.captions.active) {\n            currentTrack = captions.getCurrentTrack.call(this);\n        }\n\n        if (utils.is.track(currentTrack)) {\n            if (!utils.is.empty(currentTrack.label)) {\n                return currentTrack.label;\n            }\n\n            if (!utils.is.empty(currentTrack.language)) {\n                return track.language.toUpperCase();\n            }\n\n            return i18n.get('enabled', this.config);\n        }\n\n        return i18n.get('disabled', this.config);\n    },\n\n    // Update captions using current track's active cues\n    // Also optional array argument in case there isn't any track (ex: vimeo)\n    updateCues(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (!utils.is.element(this.elements.captions)) {\n            this.debug.warn('No captions element to render to');\n            return;\n        }\n\n        // Only accept array or empty input\n        if (!utils.is.nullOrUndefined(input) && !Array.isArray(input)) {\n            this.debug.warn('updateCues: Invalid input', input);\n            return;\n        }\n\n        let cues = input;\n\n        // Get cues from track\n        if (!cues) {\n            const track = captions.getCurrentTrack.call(this);\n            cues = Array.from((track || {}).activeCues || [])\n                .map(cue => cue.getCueAsHTML())\n                .map(utils.getHTML);\n        }\n\n        // Set new caption text\n        const content = cues.map(cueText => cueText.trim()).join('\\n');\n        const changed = content !== this.elements.captions.innerHTML;\n\n        if (changed) {\n            // Empty the container and create a new child element\n            utils.emptyElement(this.elements.captions);\n            const caption = utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.caption));\n            caption.innerHTML = content;\n            this.elements.captions.appendChild(caption);\n\n            // Trigger event\n            utils.dispatchEvent.call(this, this.media, 'cuechange');\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Reset to start when playback ended\n    resetOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.3.12/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 576,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240,\n            'default', // YouTube's \"auto\"\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: 'auto',\n        // Listen to new tracks added after Plyr is initialized.\n        // This is needed for streaming captions, but may result in unselectable options\n        update: false,\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        // 'restart',\n        // 'rewind',\n        'play',\n        // 'fast-forward',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime}s',\n        play: 'Play',\n        pause: 'Pause',\n        fastForward: 'Forward {seektime}s',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        normal: 'Normal',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        disabled: 'Disabled',\n        enabled: 'Enabled',\n        advertisement: 'Ad',\n        qualityBadge: {\n            2160: '4K',\n            1440: 'HD',\n            1080: 'HD',\n            720: 'HD',\n            576: 'SD',\n            480: 'SD',\n        },\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            sdk: 'https://player.vimeo.com/api/player.js',\n            iframe: 'https://player.vimeo.com/video/{0}?{1}',\n            api: 'https://vimeo.com/api/v2/video/{0}.json',\n        },\n        youtube: {\n            sdk: 'https://www.youtube.com/iframe_api',\n            api: 'https://www.googleapis.com/youtube/v3/videos?id={0}&key={1}&fields=items(snippet(title))&part=snippet',\n        },\n        googleIMA: {\n            sdk: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress__buffer',\n            loop: '.plyr__progress__loop', // Used later\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        caption: '.plyr__caption',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        embedContainer: 'plyr__video-embed__container',\n        poster: 'plyr__poster',\n        posterEnabled: 'plyr__poster-enabled',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        playing: 'plyr--playing',\n        paused: 'plyr--paused',\n        stopped: 'plyr--stopped',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport utils from './utils';\n\nconst browser = utils.getBrowser();\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (utils.is.element(button)) {\n        utils.toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    utils.dispatchEvent.call(this.player, this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        utils.trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    utils.toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.property = Fullscreen.property;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        utils.on(document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        utils.on(this.player.elements.container, 'dblclick', event => {\n            // Ignore double click in controls\n            if (utils.is.element(this.player.elements.controls) && this.player.elements.controls.contains(event.target)) {\n                return;\n            }\n\n            this.toggle();\n        });\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (utils.is.function(document.exitFullscreen)) {\n            return '';\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (utils.is.function(document[`${pre}ExitFullscreen`]) || utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get property() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        return (\n            (Fullscreen.native || this.player.config.fullscreen.fallback) &&\n            this.player.config.fullscreen.enabled &&\n            this.player.supported.ui &&\n            this.player.isVideo\n        );\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return utils.hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.property}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullscreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.property}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            (document.cancelFullScreen || document.exitFullscreen).call(document);\n        } else if (!utils.is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.property}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport captions from './captions';\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup captions for HTML5\n        if (this.isHTML5) {\n            captions.setup.call(this);\n        }\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality setting\n        this.quality = null;\n\n        // Reset volume display\n        controls.updateVolume.call(this);\n\n        // Reset time display\n        controls.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Check for picture-in-picture support\n        utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n        // Check for airplay support\n        utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n        // Add iOS class\n        utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n        // Add touch class\n        utils.toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            utils.dispatchEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n\n        // Assure the poster image is set, if the property was added before the element was created\n        if (this.poster && this.elements.poster && !this.elements.poster.style.backgroundImage) {\n            ui.setPoster.call(this, this.poster);\n        }\n\n        // Manually set the duration if user has overridden it.\n        // The event listeners for it doesn't get called if preload is disabled (#701)\n        if (this.config.duration) {\n            controls.durationUpdate.call(this);\n        }\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = i18n.get('play', this.config);\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n            const format = i18n.get('frameTitle', this.config);\n\n            iframe.setAttribute('title', format.replace('{title}', title));\n        }\n    },\n\n    // Toggle poster\n    togglePoster(enable) {\n        utils.toggleClass(this.elements.container, this.config.classNames.posterEnabled, enable);\n    },\n\n    // Set the poster image (async)\n    setPoster(poster) {\n        // Set property regardless of validity\n        this.media.setAttribute('poster', poster);\n\n        // Bail if element is missing\n        if (!utils.is.element(this.elements.poster)) {\n            return Promise.reject();\n        }\n\n        // Load the image, and set poster if successful\n        const loadPromise = utils.loadImage(poster)\n            .then(() => {\n                this.elements.poster.style.backgroundImage = `url('${poster}')`;\n                Object.assign(this.elements.poster.style, {\n                    backgroundImage: `url('${poster}')`,\n                    // Reset backgroundSize as well (since it can be set to \"cover\" for padded thumbnails for youtube)\n                    backgroundSize: '',\n                });\n                ui.togglePoster.call(this, true);\n                return poster;\n            });\n\n        // Hide the element if the poster can't be loaded (otherwise it will just be a black element covering the video)\n        loadPromise.catch(() => ui.togglePoster.call(this, false));\n\n        // Return the promise so the caller can use it as well\n        return loadPromise;\n    },\n\n    // Check playing state\n    checkPlaying(event) {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.paused, this.paused);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped);\n\n        // Set ARIA state\n        utils.toggleState(this.elements.buttons.play, this.playing);\n\n        // Only update controls on non timeupdate events\n        if (utils.is.event(event) && event.type === 'timeupdate') {\n            return;\n        }\n\n        // Toggle controls\n        ui.toggleControls.call(this);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Update progress bar loading class state\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Update controls visibility\n            ui.toggleControls.call(this);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Toggle controls based on state and `force` argument\n    toggleControls(force) {\n        const { controls } = this.elements;\n\n        if (controls && this.config.hideControls) {\n            // Show controls if force, loading, paused, or button interaction, otherwise hide\n            this.toggleControls(Boolean(force || this.loading || this.paused || controls.pressed || controls.hover));\n        }\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport controls from './controls';\nimport ui from './ui';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.firstTouch = this.firstTouch.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!utils.is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = utils.getFocusElement();\n            if (utils.is.element(focused) && (\n                focused !== this.player.elements.inputs.seek &&\n                utils.matches(focused, this.player.config.selectors.editable))\n            ) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Device is touch enabled\n    firstTouch() {\n        this.player.touch = true;\n\n        // Add touch class\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.isTouch, true);\n\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            utils.toggleListener(window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        utils.toggleListener(document.body, 'click', this.toggleMenu, toggle);\n\n        // Detect touch by events\n        utils.once(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            utils.on(this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.player.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n        // Add classname to tabbed elements\n        utils.on(this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls on mouse events and entering fullscreen\n        utils.on(this.player.elements.container, 'mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen', event => {\n            const { controls } = this.player.elements;\n\n            // Remove button states for fullscreen\n            if (event.type === 'enterfullscreen') {\n                controls.pressed = false;\n                controls.hover = false;\n            }\n\n            // Show, then hide after a timeout unless another control event occurs\n            const show = [\n                'touchstart',\n                'touchmove',\n                'mousemove',\n            ].includes(event.type);\n\n            let delay = 0;\n\n            if (show) {\n                ui.toggleControls.call(this.player, true);\n                // Use longer timeout for touch devices\n                delay = this.player.touch ? 3000 : 2000;\n            }\n\n            // Clear timer\n            clearTimeout(this.player.timers.controls);\n            // Timer to prevent flicker when seeking\n            this.player.timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n        });\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.player.media, 'timeupdate seeking seeked', event => controls.timeUpdate.call(this.player, event));\n\n        // Display duration\n        utils.on(this.player.media, 'durationchange loadeddata loadedmetadata', event => controls.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.player.media, 'loadeddata', () => {\n            utils.toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            utils.toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.resetOnEnd) {\n                // Restart\n                this.player.restart();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.player.media, 'progress playing seeking seeked', event => controls.updateProgress.call(this.player, event));\n\n        // Handle volume changes\n        utils.on(this.player.media, 'volumechange', event => controls.updateVolume.call(this.player, event));\n\n        // Handle play/pause\n        utils.on(this.player.media, 'playing play pause ended emptied timeupdate', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading state\n        utils.on(this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // If autoplay, then load advertisement if required\n        // TODO: Show some sort of loading state while the ad manager loads else there's a delay before ad shows\n        utils.on(this.player.media, 'playing', () => {\n            if (!this.player.ads) {\n                return;\n            }\n\n            // If ads are enabled, wait for them first\n            if (this.player.ads.enabled && !this.player.ads.initialized) {\n                // Wait for manager response\n                this.player.ads.managerPromise.then(() => this.player.ads.play()).catch(() => this.player.play());\n            }\n        });\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && this.player.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            utils.on(\n                this.player.elements.wrapper,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        utils.on(this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        utils.on(this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality request\n        utils.on(this.player.media, 'qualityrequested', event => {\n            // Save to storage\n            this.player.storage.set({ quality: event.detail.quality });\n        });\n\n        // Quality change\n        utils.on(this.player.media, 'qualitychange', event => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality', null, event.detail.quality);\n        });\n\n        // Caption language change\n        utils.on(this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        utils.on(this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let {detail = {}} = event;\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            utils.dispatchEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Run default and custom handlers\n        const proxy = (event, defaultHandler, customHandlerKey) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n            let returned = true;\n\n            // Execute custom handler\n            if (hasCustomHandler) {\n                returned = customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (returned && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Trigger custom and default handlers\n        const on = (element, type, defaultHandler, customHandlerKey, passive = true) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n\n            utils.on(element, type, event => proxy(event, defaultHandler, customHandlerKey), passive && !hasCustomHandler);\n        };\n\n        // Play/pause toggle\n        on(this.player.elements.buttons.play, 'click', this.player.togglePlay, 'play');\n\n        // Pause\n        on(this.player.elements.buttons.restart, 'click', this.player.restart, 'restart');\n\n        // Rewind\n        on(this.player.elements.buttons.rewind, 'click', this.player.rewind, 'rewind');\n\n        // Rewind\n        on(this.player.elements.buttons.fastForward, 'click', this.player.forward, 'fastForward');\n\n        // Mute toggle\n        on(\n            this.player.elements.buttons.mute,\n            'click',\n            () => {\n                this.player.muted = !this.player.muted;\n            },\n            'mute',\n        );\n\n        // Captions toggle\n        on(this.player.elements.buttons.captions, 'click', this.player.toggleCaptions);\n\n        // Fullscreen toggle\n        on(\n            this.player.elements.buttons.fullscreen,\n            'click',\n            () => {\n                this.player.fullscreen.toggle();\n            },\n            'fullscreen',\n        );\n\n        // Picture-in-Picture\n        on(\n            this.player.elements.buttons.pip,\n            'click',\n            () => {\n                this.player.pip = 'toggle';\n            },\n            'pip',\n        );\n\n        // Airplay\n        on(this.player.elements.buttons.airplay, 'click', this.player.airplay, 'airplay');\n\n        // Settings menu\n        on(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        on(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Go back to home tab on click\n            const showHomeTab = () => {\n                const id = `plyr-settings-${this.player.id}-home`;\n                controls.showTab.call(this.player, id);\n            };\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.currentTrack = Number(event.target.value);\n                        showHomeTab();\n                    },\n                    'language',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.quality = event.target.value;\n                        showHomeTab();\n                    },\n                    'quality',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.speed = parseFloat(event.target.value);\n                        showHomeTab();\n                    },\n                    'speed',\n                );\n            } else {\n                const tab = event.target;\n                controls.showTab.call(this.player, tab.getAttribute('aria-controls'));\n            }\n        });\n\n        // Set range input alternative \"value\", which matches the tooltip time (#954)\n        on(this.player.elements.inputs.seek, 'mousedown mousemove', event => {\n            const clientRect = this.player.elements.progress.getBoundingClientRect();\n            const percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n            event.currentTarget.setAttribute('seek-value', percent);\n        });\n\n        // Pause while seeking\n        on(this.player.elements.inputs.seek, 'mousedown mouseup keydown keyup touchstart touchend', event => {\n            const seek = event.currentTarget;\n\n            const code = event.keyCode ? event.keyCode : event.which;\n            const eventType = event.type;\n\n            if ((eventType === 'keydown' || eventType === 'keyup') && (code !== 39 && code !== 37)) {\n                return;\n            }\n            // Was playing before?\n            const play = seek.hasAttribute('play-on-seeked');\n\n            // Done seeking\n            const done = [\n                'mouseup',\n                'touchend',\n                'keyup',\n            ].includes(event.type);\n\n            // If we're done seeking and it was playing, resume playback\n            if (play && done) {\n                seek.removeAttribute('play-on-seeked');\n                this.player.play();\n            } else if (!done && this.player.playing) {\n                seek.setAttribute('play-on-seeked', '');\n                this.player.pause();\n            }\n        });\n\n        // Seek\n        on(\n            this.player.elements.inputs.seek,\n            inputEvent,\n            event => {\n                const seek = event.currentTarget;\n\n                // If it exists, use seek-value instead of \"value\" for consistency with tooltip time (#954)\n                let seekTo = seek.getAttribute('seek-value');\n\n                if (utils.is.empty(seekTo)) {\n                    seekTo = seek.value;\n                }\n\n                seek.removeAttribute('seek-value');\n\n                this.player.currentTime = seekTo / seek.max * this.player.duration;\n            },\n            'seek',\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !utils.is.element(this.player.elements.display.duration)) {\n            on(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n\n                controls.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        on(\n            this.player.elements.inputs.volume,\n            inputEvent,\n            event => {\n                this.player.volume = event.target.value;\n            },\n            'volume',\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            on(utils.getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        on(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Update controls.hover state (used for ui.toggleControls to avoid hiding when interacting)\n        on(this.player.elements.controls, 'mouseenter mouseleave', event => {\n            this.player.elements.controls.hover = !this.player.touch && event.type === 'mouseenter';\n        });\n\n        // Update controls.pressed state (used for ui.toggleControls to avoid hiding when interacting)\n        on(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n            this.player.elements.controls.pressed = [\n                'mousedown',\n                'touchstart',\n            ].includes(event.type);\n        });\n\n        // Focus in/out on controls\n        on(this.player.elements.controls, 'focusin focusout', event => {\n            const { config, elements, timers } = this.player;\n\n            // Skip transition to prevent focus from scrolling the parent element\n            utils.toggleClass(elements.controls, config.classNames.noTransition, event.type === 'focusin');\n\n            // Toggle\n            ui.toggleControls.call(this.player, event.type === 'focusin');\n\n            // If focusin, hide again after delay\n            if (event.type === 'focusin') {\n                // Restore transition\n                setTimeout(() => {\n                    utils.toggleClass(elements.controls, config.classNames.noTransition, false);\n                }, 0);\n\n                // Delay a little more for keyboard users\n                const delay = this.touch ? 3000 : 4000;\n\n                // Clear timer\n                clearTimeout(timers.controls);\n                // Hide\n                timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n            }\n        });\n\n        // Mouse wheel for volume\n        on(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event => {\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                const inverted = event.webkitDirectionInvertedFromDevice;\n                const step = 1 / 50;\n                let direction = 0;\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    } else {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    } else {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    }\n                }\n\n                // Don't break page scrolling at max and min\n                if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                    event.preventDefault();\n                }\n            },\n            'volume',\n            false,\n        );\n    }\n}\n\nexport default Listeners;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        utils.dispatchEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils\n                .loadScript(this.config.urls.vimeo.sdk)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n\n        if (this.supported.ui) {\n            const height = 240;\n            const offset = (height - padding) / (height / 50);\n\n            this.media.style.transform = `translateY(-${offset}%)`;\n        }\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            // muted: player.muted,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n            playsinline: !this.config.fullscreen.iosNative,\n        };\n        const params = utils.buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(player.config.attributes.embed.id);\n        }\n\n        const id = utils.parseVimeoId(source);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = utils.format(player.config.urls.vimeo.iframe, id, params);\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div', { class: player.config.classNames.embedContainer });\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Get poster image\n        utils.fetch(utils.format(player.config.urls.vimeo.api, id), 'json').then(response => {\n            if (utils.is.empty(response)) {\n                return;\n            }\n\n            // Get the URL for thumbnail\n            const url = new URL(response[0].thumbnail_large);\n\n            // Get original image\n            url.pathname = `${url.pathname.split('_')[0]}.jpg`;\n\n            // Set and show poster\n            ui.setPoster.call(player, url.href);\n        });\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe, {\n            autopause: player.config.autopause,\n            muted: player.muted,\n        });\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Disable native text track rendering\n        if (player.supported.ui) {\n            player.embed.disableTextTrack();\n        }\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            assurePlaybackState.call(player, true);\n            return player.embed.play();\n        };\n\n        player.media.pause = () => {\n            assurePlaybackState.call(player, false);\n            return player.embed.pause();\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Vimeo will automatically play on seek if the video hasn't been played before\n\n                // Get current paused state and volume etc\n                const { embed, media, paused, volume } = player;\n                const restorePause = paused && !embed.hasPlayed;\n\n                // Set seeking state and trigger event\n                media.seeking = true;\n                utils.dispatchEvent.call(player, media, 'seeking');\n\n                // If paused, mute until seek is complete\n                Promise.resolve(restorePause && embed.setVolume(0))\n                    // Seek\n                    .then(() => embed.setCurrentTime(time))\n                    // Restore paused\n                    .then(() => restorePause && embed.pause())\n                    // Restore volume\n                    .then(() => restorePause && embed.setVolume(volume))\n                    .catch(() => {\n                        // Do nothing\n                    });\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed\n                    .setPlaybackRate(input)\n                    .then(() => {\n                        speed = input;\n                        utils.dispatchEvent.call(player, player.media, 'ratechange');\n                    })\n                    .catch(error => {\n                        // Hide menu item (and menu if empty)\n                        if (error.name === 'Error') {\n                            controls.setSpeedMenu.call(player, []);\n                        }\n                    });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed\n            .getVideoUrl()\n            .then(value => {\n                currentSrc = value;\n            })\n            .catch(error => {\n                this.debug.warn(error);\n            });\n\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', ({ cues = [] }) => {\n            const strippedCues = cues.map(cue => utils.stripHTML(cue.text));\n            captions.updateCues.call(player, strippedCues);\n        });\n\n        player.embed.on('loaded', () => {\n            // Assure state and events are updated on autoplay\n            player.embed.getPaused().then(paused => {\n                assurePlaybackState.call(player, !paused);\n                if (!paused) {\n                    utils.dispatchEvent.call(player, player.media, 'playing');\n                }\n            });\n\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            assurePlaybackState.call(player, true);\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            assurePlaybackState.call(player, false);\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n\n            // Get duration as if we do it before load, it gives an incorrect value\n            // https://github.com/sampotts/plyr/issues/891\n            player.embed.getDuration().then(value => {\n                if (value !== player.media.duration) {\n                    player.media.duration = value;\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n                }\n            });\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\n// Standardise YouTube quality unit\nfunction mapQualityUnit(input) {\n    const qualities = {\n        hd2160: 2160,\n        hd1440: 1440,\n        hd1080: 1080,\n        hd720: 720,\n        large: 480,\n        medium: 360,\n        small: 240,\n        tiny: 144,\n    };\n\n    const entry = Object.entries(qualities)\n        .find(entry => entry.includes(input));\n\n    if (entry) {\n        // Get the match corresponding to the input\n        return entry.find(value => value !== input);\n    }\n\n    return 'default';\n}\n\nfunction mapQualityUnits(levels) {\n    if (utils.is.empty(levels)) {\n        return levels;\n    }\n\n    return utils.dedupe(levels.map(level => mapQualityUnit(level)));\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        utils.dispatchEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.sdk).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = utils.format(this.config.urls.youtube.api, videoId, key);\n\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(source);\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Set poster image\n        const posterSrc = format => `https://img.youtube.com/vi/${videoId}/${format}default.jpg`;\n\n        // Check thumbnail images in order of quality, but reject fallback thumbnails (120px wide)\n        utils.loadImage(posterSrc('maxres'), 121) // Higest quality and unpadded\n            .catch(() => utils.loadImage(posterSrc('sd'), 121)) // 480p padded 4:3\n            .catch(() => utils.loadImage(posterSrc('hq'))) // 360p padded 4:3. Always exists\n            .then(image => ui.setPoster.call(player, image.src))\n            .then(posterSrc => {\n                // If the image is padded, use background-size \"cover\" instead (like youtube does too with their posters)\n                if (!posterSrc.includes('maxres')) {\n                    player.elements.poster.style.backgroundSize = 'cover';\n                }\n            });\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange() {\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                        quality: player.media.quality,\n                    });\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        assurePlaybackState.call(player, true);\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        assurePlaybackState.call(player, false);\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // If paused, mute audio preventively (YouTube starts playing on seek if the video hasn't been played yet).\n                            if (player.paused) {\n                                player.embed.mute();\n                            }\n\n                            // Set seeking state and trigger event\n                            player.media.seeking = true;\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return mapQualityUnit(instance.getPlaybackQuality());\n                        },\n                        set(input) {\n                            instance.setPlaybackQuality(mapQualityUnit(input));\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    const seeked = player.media.seeking && [\n                        1,\n                        2,\n                    ].includes(event.data);\n\n                    if (seeked) {\n                        // Unset seeking and fire seeked event\n                        player.media.seeking = false;\n                        utils.dispatchEvent.call(player, player.media, 'seeked');\n                    }\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            assurePlaybackState.call(player, false);\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // Restore paused state (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (player.media.paused && !player.embed.hasPlayed) {\n                                player.media.pause();\n                            } else {\n                                assurePlaybackState.call(player, true);\n\n                                utils.dispatchEvent.call(player, player.media, 'playing');\n\n                                // Poll to get playback progress\n                                player.timers.playing = setInterval(() => {\n                                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                                }, 50);\n\n                                // Check duration again due to YouTube bug\n                                // https://github.com/sampotts/plyr/issues/374\n                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                                if (player.media.duration !== instance.getDuration()) {\n                                    player.media.duration = instance.getDuration();\n                                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n                                }\n\n                                // Get quality\n                                controls.setQualityMenu.call(player, mapQualityUnits(instance.getAvailableQualityLevels()));\n                            }\n\n                            break;\n\n                        case 2:\n                            // Restore audio (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (!player.muted) {\n                                player.embed.unMute();\n                            }\n                            assurePlaybackState.call(player, false);\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport html5 from './html5';\nimport vimeo from './plugins/vimeo';\nimport youtube from './plugins/youtube';\nimport utils from './utils';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n\n            // Faux poster container\n            this.elements.poster = utils.createElement('div', {\n                class: this.config.classNames.poster,\n            });\n\n            this.elements.wrapper.appendChild(this.elements.poster);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            html5.extend.call(this);\n        }\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport i18n from '../i18n';\nimport utils from '../utils';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    get enabled() {\n        return this.player.isVideo && this.player.config.ads.enabled && !utils.is.empty(this.publisherId);\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!utils.is.object(window.google) || !utils.is.object(window.google.ima)) {\n                utils\n                    .loadScript(this.player.config.urls.googleIMA.sdk)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${utils.buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = utils.createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            // Mute based on current state\n            request.setAdWillPlayMuted(!this.player.muted);\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = utils.formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${i18n.get('advertisement', this.player.config)} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        if (!utils.is.empty(this.cuePoints)) {\n            this.cuePoints.forEach(cuePoint => {\n                if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                    const seekElement = this.player.elements.progress;\n\n                    if (utils.is.element(seekElement)) {\n                        const cuePercentage = 100 / this.player.duration * cuePoint;\n                        const cue = utils.createElement('span', {\n                            class: this.player.config.classNames.cues,\n                        });\n\n                        cue.style.left = `${cuePercentage.toString()}%`;\n                        seekElement.appendChild(cue);\n                    }\n                }\n            });\n        }\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.player.debug.warn(this.manager.getAdSkippableState());\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            utils.dispatchEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            if (utils.is.empty(this.cuePoints)) {\n                return;\n            }\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            if (this.manager) {\n                this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n            }\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (utils.is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (utils.is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!utils.is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!utils.is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport html5 from './html5';\nimport media from './media';\nimport support from './support';\nimport { providers } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        html5.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // Reset quality options\n                this.options.quality = [];\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if (!utils.is.empty(input.poster)) {\n                        this.poster = input.poster;\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.playsinline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.3.12\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport captions from './captions';\nimport Console from './console';\nimport controls from './controls';\nimport defaults from './defaults';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport media from './media';\nimport Ads from './plugins/ads';\nimport source from './source';\nimport Storage from './storage';\nimport support from './support';\nimport { providers, types } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Touch device\n        this.touch = support.touch;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            Plyr.defaults,\n            options || {},\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: -1,\n            meta: new WeakMap(),\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        const clone = this.media.cloneNode(true);\n        clone.autoplay = false;\n        this.elements.original = clone;\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (utils.is.element(iframe)) {\n                    // Detect provider\n                    url = iframe.getAttribute('src');\n                    this.provider = utils.getProviderByUrl(url);\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    params = utils.getUrlParams(url);\n                    if (!utils.is.empty(params)) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(params.autoplay)) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(params.loop)) {\n                            this.config.loop.active = true;\n                        }\n\n                        // TODO: replace fullscreen.iosNative with this playsinline config option\n                        // YouTube requires the playsinline in the URL\n                        if (this.isYouTube) {\n                            this.config.playsinline = truthy.includes(params.playsinline);\n                        } else {\n                            this.config.playsinline = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.playsinline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n\n        // Autoplay if required\n        if (this.config.autoplay) {\n            this.play();\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        if (!utils.is.function(this.media.play)) {\n            return null;\n        }\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !utils.is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get stopped state\n     */\n    get stopped() {\n        return Boolean(this.paused && this.currentTime === 0);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.pause();\n            this.restart();\n        } else if (utils.is.function(this.media.stop)) {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        // Bail if media duration isn't available yet\n        if (!this.duration) {\n            return;\n        }\n\n        // Validate input\n        const inputIsValid = utils.is.number(input) && input > 0;\n\n        // Set\n        this.media.currentTime = inputIsValid ? Math.min(input, this.duration) : 0;\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (utils.is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseFloat(this.config.duration);\n\n        // Media duration can be NaN before the media has loaded\n        const duration = (this.media || {}).duration || 0;\n\n        // If config duration is funky, use regular duration\n        return fauxDuration || duration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume manually, reset muted state\n        if (!utils.is.empty(value) && this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently HTML5 & YouTube only\n     * @param {number} input - Quality level\n     */\n    set quality(input) {\n        const config = this.config.quality;\n        const options = this.options.quality;\n\n        if (!options.length) {\n            return;\n        }\n\n        let quality = ([\n            !utils.is.empty(input) && Number(input),\n            this.storage.get('quality'),\n            config.selected,\n            config.default,\n        ]).find(utils.is.number);\n\n        if (!options.includes(quality)) {\n            const closest = utils.closest(options, quality);\n            this.debug.warn(`Unsupported quality option: ${quality}, using ${closest} instead`);\n            quality = closest;\n        }\n\n        // Trigger request event\n        utils.dispatchEvent.call(this, this.media, 'qualityrequested', false, { quality });\n\n        // Update config\n        config.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isVideo) {\n            this.debug.warn('Poster can only be set for video');\n            return;\n        }\n\n        ui.setPoster.call(this, input);\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const active = utils.is.boolean(input) ? input : !this.elements.container.classList.contains(this.config.classNames.captions.active);\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, active);\n\n        // Update state and trigger event\n        if (active !== this.captions.active) {\n            this.captions.active = active;\n            utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n        }\n    }\n\n    /**\n     * Set the caption track by index\n     * @param {number} - Caption index\n     */\n    set currentTrack(input) {\n        captions.set.call(this, input);\n    }\n\n    /**\n     * Get the current caption track index (-1 if disabled)\n     */\n    get currentTrack() {\n        const { active, currentTrack } = this.captions;\n        return active ? currentTrack : -1;\n    }\n\n    /**\n     * Set the wanted language for captions\n     * Since tracks can be added later it won't update the actual caption track until there is a matching track\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        captions.setLanguage.call(this, input);\n    }\n\n    /**\n     * Get the current track's language\n     */\n    get language() {\n        return (captions.getCurrentTrack.call(this) || {}).language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} [toggle] - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // Don't toggle if missing UI support or if it's audio\n        if (this.supported.ui && !this.isAudio) {\n            // Get state before change\n            const isHidden = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n\n            // Negate the argument if not undefined since adding the class to hides the controls\n            const force = typeof toggle === 'undefined' ? undefined : !toggle;\n\n            // Apply and get updated state\n            const hiding = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, force);\n\n            // Close menu\n            if (hiding && this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                controls.toggleMenu.call(this, false);\n            }\n            // Trigger event on change\n            if (hiding !== isHidden) {\n                const eventName = hiding ? 'controlshidden' : 'controlsshown';\n                utils.dispatchEvent.call(this, this.media, eventName);\n            }\n            return !hiding;\n        }\n        return false;\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Add event listeners once\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    once(event, callback) {\n        utils.once(this.elements.container, event, callback);\n    }\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    utils.removeElement(this.elements.buttons.play);\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                utils.cleanupEventListeners();\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && utils.is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {*} selector\n     * @param {object} options\n     */\n    static setup(selector, options = {}) {\n        let targets = null;\n\n        if (utils.is.string(selector)) {\n            targets = Array.from(document.querySelectorAll(selector));\n        } else if (utils.is.nodeList(selector)) {\n            targets = Array.from(selector);\n        } else if (utils.is.array(selector)) {\n            targets = selector.filter(utils.is.element);\n        }\n\n        if (utils.is.empty(targets)) {\n            return null;\n        }\n\n        return targets.map(t => new Plyr(t, options));\n    }\n}\n\nPlyr.defaults = utils.cloneDeep(defaults);\n\nexport default Plyr;\n"]}